{
    "pipes": [],
    "interfaces": [
        {
            "name": "SgApp",
            "id": "interface-SgApp-ca56549680520fb1e7996a6bdee7b5cb",
            "file": "projects/songlasses/src/lib/models/sg-app/sg-app.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface SgApp {\r\n\r\n    // sidebarType is a directive for the app component on how to display the sidebar\r\n    // no-sidebar = this app component is configured without an sidedbar\r\n    // sliding-sidebar = this app component uses a sliding sidebar in all view modes\r\n    // integrated-sidebar = this app component uses the width to trigger the use of a sliding \r\n    //                      sidebar on small displays and an integrated sidebar on bigger displays\r\n    sidebarType: 'no-sidebar' | 'sliding-sidebar' | 'integrated-sidebar';\r\n\r\n    // Indicator to switch the display of the sidebar on(true) and off(false).\r\n    // Only relevant when the sidebarType is sliding-sidebar or integrated-sidebar\r\n    showSidebar: boolean;\r\n\r\n    // Indicator to switch the display of the integrated sidebar on(true) and off(false).\r\n    // Only relevant when the sidebarType is integrated-sidebar\r\n    showIntegratedSidebar: boolean;\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "showIntegratedSidebar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "showSidebar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "sidebarType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"no-sidebar\" | \"sliding-sidebar\" | \"integrated-sidebar\"",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "SgComponentConfig",
            "id": "interface-SgComponentConfig-989c5242235d8be64c8b96ae5eaae857",
            "file": "projects/songlasses/src/lib/models/sg-component/sg-component-config.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface SgComponentConfig {\r\n\r\n    name?: string;\r\n    show?: boolean;\r\n    className?: string;\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "className",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "show",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "SgComponentConfigEvent",
            "id": "interface-SgComponentConfigEvent-896c2b9093adbd8664872dfef28a072d",
            "file": "projects/songlasses/src/lib/models/sg-component/sg-component-config-event.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { SgComponentConfig } from \"./sg-component-config.model\";\r\nimport { SgComponentServiceEvent } from \"./sg-event.model\";\r\n\r\nexport interface SgComponentConfigEvent<T extends SgComponentConfig | null> extends SgComponentServiceEvent {\r\n\r\n    componentConfig: T | null;\r\n    \r\n}\r\n",
            "properties": [
                {
                    "name": "componentConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T | null",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "SgComponentServiceEvent"
        },
        {
            "name": "SgComponentHasValueService",
            "id": "interface-SgComponentHasValueService-f13f2560e66be762a5f197e1ce49f948",
            "file": "projects/songlasses/src/lib/services/sg-component/sg-component-has-value.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable } from \"rxjs\";\r\nimport { SgComponentValueEvent } from \"../../models/sg-component/sg-component-value-event.model\";\r\n\r\nexport interface SgComponentHasValueService<T> {\r\n\r\n    hasValue: boolean;\r\n\r\n    getValueObservable(): Observable<SgComponentValueEvent<T | null>>;\r\n    setValue(value: T | null): void;\r\n    getValue(): T | null;\r\n    clearValue(): void;\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "hasValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [
                {
                    "name": "clearValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getValue",
                    "args": [],
                    "optional": false,
                    "returnType": "T | null",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getValueObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<SgComponentValueEvent<T | null>>",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "T | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "SgComponentServiceEvent",
            "id": "interface-SgComponentServiceEvent-b3141071ac3a34555b4c61c0dcc93a81",
            "file": "projects/songlasses/src/lib/models/sg-component/sg-event.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface SgComponentServiceEvent {\r\n\r\n    event: string;\r\n    \r\n}\r\n",
            "properties": [
                {
                    "name": "event",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "SgComponentValueEvent",
            "id": "interface-SgComponentValueEvent-e7bef00885cba6f1479e1450dd3e722f",
            "file": "projects/songlasses/src/lib/models/sg-component/sg-component-value-event.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { SgComponentServiceEvent } from \"./sg-event.model\";\r\n\r\nexport interface SgComponentValueEvent<V extends any | null> extends SgComponentServiceEvent {\r\n\r\n    value: V\r\n    \r\n}\r\n",
            "properties": [
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "V",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "SgComponentServiceEvent"
        },
        {
            "name": "SgGroupComponentConfig",
            "id": "interface-SgGroupComponentConfig-dd8f946708777f30db15cddc0ea48a83",
            "file": "projects/songlasses/src/lib/models/sg-component/sg-group-component-config.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { SgComponentConfig } from \"./sg-component-config.model\";\r\n\r\nexport interface SgGroupComponentConfig extends SgComponentConfig {\r\n\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "SgComponentConfig"
        },
        {
            "name": "SgRootComponentConfig",
            "id": "interface-SgRootComponentConfig-c366f81b8d6bf8b30e2170f4253c14c4",
            "file": "projects/songlasses/src/lib/models/sg-component/sg-root-component-config.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { SgComponentConfig } from \"./sg-component-config.model\";\r\n\r\nexport interface SgRootComponentConfig extends SgComponentConfig {\r\n\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "SgComponentConfig"
        },
        {
            "name": "SgSelectComponentConfig",
            "id": "interface-SgSelectComponentConfig-adf943b7cbcff94c3916631452257c76",
            "file": "projects/songlasses/src/lib/models/sg-component/sg-select-component-config.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { SgComponentConfig } from \"./sg-component-config.model\";\r\n\r\nexport interface SgSelectComponentConfig extends SgComponentConfig {\r\n\r\n    required?: boolean;\r\n    itemMatchStrategy?: 'startsWith' | 'contains',\r\n    itemValueField?: string;\r\n    itemDescriptionField?: string;\r\n    items?: any[];\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "itemDescriptionField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "itemMatchStrategy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"startsWith\" | \"contains\"",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "itemValueField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "SgComponentConfig"
        },
        {
            "name": "SgSidebarMenu",
            "id": "interface-SgSidebarMenu-c88bace38cef5b9a1d19b3378441e804",
            "file": "projects/songlasses/src/lib/models/sg-sidebar/sg-sidebar-menu.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { SgMenuItem } from \"./sg-menu-item.model\";\r\n\r\nexport interface SgSidebarMenu {\r\n\r\n    menuItemsStack: SgMenuItem[][];\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "menuItemsStack",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SgMenuItem[][]",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Superhero",
            "id": "interface-Superhero-969758bde2cc4344e5ae887a4917aaec",
            "file": "src/app/models/superhero.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Superhero {\r\n\r\n    id: string | null,\r\n    name: string,\r\n    superheroName: string\r\n\r\n}",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "superheroName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "SgAppService",
            "id": "injectable-SgAppService-bcc858082e6a8d24f98b0b483f805f89",
            "file": "projects/songlasses/src/lib/services/sg-app/sg-app.service.ts",
            "properties": [
                {
                    "name": "app",
                    "defaultValue": "{\r\n        sidebarType: 'integrated-sidebar',\r\n        showSidebar: false,\r\n        showIntegratedSidebar: true\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SgApp",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "subject",
                    "defaultValue": "new Subject<SgApp>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getSidebar",
                    "args": [],
                    "optional": false,
                    "returnType": "SgApp",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSidebarObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<SgApp>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hideIntegratedSidebar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hideSidebar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "refreshSidebar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "sendSidebar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "setSidebar",
                    "args": [
                        {
                            "name": "app",
                            "type": "SgApp",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "app",
                            "type": "SgApp",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showIntegratedSidebar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showSidebar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { SgApp } from '../../models/sg-app/sg-app.model';\r\nimport { InjectUtils } from '../../utils/inject-utils';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class SgAppService {\r\n\r\n    private app: SgApp = {\r\n        sidebarType: 'integrated-sidebar',\r\n        showSidebar: false,\r\n        showIntegratedSidebar: true\r\n    };\r\n\r\n    private subject = new Subject<SgApp>();\r\n\r\n    constructor() {\r\n        InjectUtils.throwErrorIfExists(SgAppService);\r\n    }\r\n\r\n    getSidebarObservable(): Observable<SgApp> {\r\n        return this.subject.asObservable();\r\n    }\r\n\r\n    getSidebar(): SgApp {\r\n        return this.app;\r\n    }\r\n\r\n    setSidebar(app: SgApp): void {\r\n        this.app = app;\r\n    }\r\n\r\n    refreshSidebar(): void {\r\n        this.sendSidebar();\r\n    }\r\n    \r\n    showSidebar(): void {\r\n        this.app.showSidebar = true;\r\n        this.sendSidebar();\r\n    }\r\n\r\n    hideSidebar(): void {\r\n        this.app.showSidebar = false;\r\n        this.sendSidebar();\r\n    }\r\n\r\n    showIntegratedSidebar(): void {\r\n        this.app.showIntegratedSidebar = true;\r\n        this.sendSidebar();\r\n    }\r\n\r\n    hideIntegratedSidebar(): void {\r\n        this.app.showIntegratedSidebar = false;\r\n        this.sendSidebar();\r\n    }\r\n\r\n    private sendSidebar(): void {\r\n        this.subject.next(this.app);\r\n    }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 17
            },
            "type": "injectable"
        },
        {
            "name": "SgGroupComponentService",
            "id": "injectable-SgGroupComponentService-dc09328ae4bf3b113481876514d4aa82",
            "file": "projects/songlasses/src/lib/services/sg-component/sg-group-component.service.ts",
            "properties": [
                {
                    "name": "componentConfigDefault",
                    "defaultValue": "{\r\n        name: 'group',\r\n        show: true,\r\n        className: ''\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SgGroupComponentConfig",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "componentServices",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SgComponentService<SgComponentConfig>[]",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        120
                    ],
                    "inheritance": {
                        "file": "SgComponentServiceWithChildren"
                    }
                },
                {
                    "name": "logColor",
                    "defaultValue": "\"green\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        120
                    ],
                    "inheritance": {
                        "file": "SgComponentServiceWithChildren"
                    }
                },
                {
                    "name": "logPaddingLeft",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        120
                    ],
                    "inheritance": {
                        "file": "SgComponentServiceWithChildren"
                    }
                },
                {
                    "name": "componentConfig",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T | null",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        120
                    ],
                    "inheritance": {
                        "file": "SgComponentService"
                    }
                },
                {
                    "name": "componentConfigSubject",
                    "defaultValue": "new Subject<SgComponentConfigEvent<T | null>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        120
                    ],
                    "inheritance": {
                        "file": "SgComponentService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getDefaults",
                    "args": [],
                    "optional": false,
                    "returnType": "SgGroupComponentConfig",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setDefaults",
                    "args": [
                        {
                            "name": "componentConfigDefault",
                            "type": "SgGroupComponentConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "componentConfigDefault",
                            "type": "SgGroupComponentConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getComponentService",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SgComponentService | undefined",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "SgComponentServiceWithChildren"
                    }
                },
                {
                    "name": "getComponentServiceFromComponentServices",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "componentServices",
                            "type": "SgComponentService<SgComponentConfig>[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SgComponentService | undefined",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "componentServices",
                            "type": "SgComponentService<SgComponentConfig>[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "SgComponentServiceWithChildren"
                    }
                },
                {
                    "name": "getComponentServices",
                    "args": [],
                    "optional": false,
                    "returnType": "SgComponentService[]",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "SgComponentServiceWithChildren"
                    }
                },
                {
                    "name": "getNamePredicate",
                    "args": [
                        {
                            "name": "componentService",
                            "type": "SgComponentService<SgComponentConfig>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "componentService",
                            "type": "SgComponentService<SgComponentConfig>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "SgComponentServiceWithChildren"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "level",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "1"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nConvenience method to log the component services structure to the console.\n\n",
                    "description": "<p>Convenience method to log the component services structure to the console.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1398,
                                "end": 1403,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "level"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "1",
                            "tagName": {
                                "pos": 1392,
                                "end": 1397,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "SgComponentServiceWithChildren"
                    }
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "componentService",
                            "type": "SgComponentService<SgComponentConfig>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "componentService",
                            "type": "SgComponentService<SgComponentConfig>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "SgComponentServiceWithChildren"
                    }
                },
                {
                    "name": "unregister",
                    "args": [
                        {
                            "name": "componentService",
                            "type": "SgComponentService<SgComponentConfig>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "componentService",
                            "type": "SgComponentService<SgComponentConfig>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "SgComponentServiceWithChildren"
                    }
                },
                {
                    "name": "getComponentConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "T | null",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "SgComponentService"
                    }
                },
                {
                    "name": "getComponentConfigObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<SgComponentConfigEvent<T | null>>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "SgComponentService"
                    }
                },
                {
                    "name": "getName",
                    "args": [],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "SgComponentService"
                    }
                },
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "SgComponentService"
                    }
                },
                {
                    "name": "refresh",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "SgComponentService"
                    }
                },
                {
                    "name": "sendComponentConfig",
                    "args": [
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "\"service\""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "\"service\"",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "SgComponentService"
                    }
                },
                {
                    "name": "setComponentConfig",
                    "args": [
                        {
                            "name": "componentConfig",
                            "type": "T | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "componentConfig",
                            "type": "T | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "SgComponentService"
                    }
                },
                {
                    "name": "show",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "SgComponentService"
                    }
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "SgComponentService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Class for a component service group containing a group of component services.</p>\n<p>This makes it possible to retrieve a group of component services from anywhere in the application\nto manipulate only the components in the group.</p>\n",
            "rawdescription": "\n\nClass for a component service group containing a group of component services.\n\nThis makes it possible to retrieve a group of component services from anywhere in the application\nto manipulate only the components in the group.\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { SgGroupComponentConfig } from \"../../models/sg-component/sg-group-component-config.model\";\r\nimport { SgComponentServiceWithChildren } from \"./sg-component-service-with-children.service\";\r\n\r\n/**\r\n * Class for a component service group containing a group of component services.\r\n * \r\n * This makes it possible to retrieve a group of component services from anywhere in the application\r\n * to manipulate only the components in the group.\r\n */\r\n@Injectable()\r\nexport class SgGroupComponentService extends SgComponentServiceWithChildren<SgGroupComponentConfig> {\r\n\r\n    private componentConfigDefault: SgGroupComponentConfig = {\r\n        name: 'group',\r\n        show: true,\r\n        className: ''\r\n    };\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n    \r\n    getDefaults(): SgGroupComponentConfig {\r\n        return this.componentConfigDefault;\r\n    }\r\n    \r\n    setDefaults(componentConfigDefault: SgGroupComponentConfig): void {\r\n        this.componentConfigDefault = componentConfigDefault;\r\n    }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 18
            },
            "extends": "SgComponentServiceWithChildren",
            "type": "injectable"
        },
        {
            "name": "SgRootComponentService",
            "id": "injectable-SgRootComponentService-03cbca726aeacbc02b7597c3ada9198f",
            "file": "projects/songlasses/src/lib/services/sg-component/sg-root-component.service.ts",
            "properties": [
                {
                    "name": "componentConfigDefault",
                    "defaultValue": "{\r\n        name: \"root\",\r\n        show: true,\r\n        className: \"root\"\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SgRootComponentConfig",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "componentServices",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SgComponentService<SgComponentConfig>[]",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        120
                    ],
                    "inheritance": {
                        "file": "SgComponentServiceWithChildren"
                    }
                },
                {
                    "name": "logColor",
                    "defaultValue": "\"green\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        120
                    ],
                    "inheritance": {
                        "file": "SgComponentServiceWithChildren"
                    }
                },
                {
                    "name": "logPaddingLeft",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        120
                    ],
                    "inheritance": {
                        "file": "SgComponentServiceWithChildren"
                    }
                },
                {
                    "name": "componentConfig",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T | null",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        120
                    ],
                    "inheritance": {
                        "file": "SgComponentService"
                    }
                },
                {
                    "name": "componentConfigSubject",
                    "defaultValue": "new Subject<SgComponentConfigEvent<T | null>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        120
                    ],
                    "inheritance": {
                        "file": "SgComponentService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getComponentService",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SgComponentService | undefined",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "SgComponentServiceWithChildren"
                    }
                },
                {
                    "name": "getComponentServiceFromComponentServices",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "componentServices",
                            "type": "SgComponentService<SgComponentConfig>[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SgComponentService | undefined",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "componentServices",
                            "type": "SgComponentService<SgComponentConfig>[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "SgComponentServiceWithChildren"
                    }
                },
                {
                    "name": "getComponentServices",
                    "args": [],
                    "optional": false,
                    "returnType": "SgComponentService[]",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "SgComponentServiceWithChildren"
                    }
                },
                {
                    "name": "getNamePredicate",
                    "args": [
                        {
                            "name": "componentService",
                            "type": "SgComponentService<SgComponentConfig>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "componentService",
                            "type": "SgComponentService<SgComponentConfig>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "SgComponentServiceWithChildren"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "level",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "1"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nConvenience method to log the component services structure to the console.\n\n",
                    "description": "<p>Convenience method to log the component services structure to the console.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1398,
                                "end": 1403,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "level"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "1",
                            "tagName": {
                                "pos": 1392,
                                "end": 1397,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ],
                    "inheritance": {
                        "file": "SgComponentServiceWithChildren"
                    }
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "componentService",
                            "type": "SgComponentService<SgComponentConfig>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "componentService",
                            "type": "SgComponentService<SgComponentConfig>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "SgComponentServiceWithChildren"
                    }
                },
                {
                    "name": "unregister",
                    "args": [
                        {
                            "name": "componentService",
                            "type": "SgComponentService<SgComponentConfig>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "componentService",
                            "type": "SgComponentService<SgComponentConfig>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "SgComponentServiceWithChildren"
                    }
                },
                {
                    "name": "getComponentConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "T | null",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "SgComponentService"
                    }
                },
                {
                    "name": "getComponentConfigObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<SgComponentConfigEvent<T | null>>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "SgComponentService"
                    }
                },
                {
                    "name": "getName",
                    "args": [],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "SgComponentService"
                    }
                },
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "SgComponentService"
                    }
                },
                {
                    "name": "refresh",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "SgComponentService"
                    }
                },
                {
                    "name": "sendComponentConfig",
                    "args": [
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "\"service\""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "\"service\"",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "SgComponentService"
                    }
                },
                {
                    "name": "setComponentConfig",
                    "args": [
                        {
                            "name": "componentConfig",
                            "type": "T | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "componentConfig",
                            "type": "T | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "SgComponentService"
                    }
                },
                {
                    "name": "show",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "SgComponentService"
                    }
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "SgComponentService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>The singleton root component service where components register there component service.</p>\n<p>This makes it possible to retrieve a component service and maniplute it&#39;s component from\nanywhere in the application.</p>\n<p>If in the register method the component group is provided the component services is added\nto the list of component services of the component group creating a hierachical tree structure\nof component services.</p>\n",
            "rawdescription": "\n\nThe singleton root component service where components register there component service.\n\nThis makes it possible to retrieve a component service and maniplute it's component from\nanywhere in the application.\n\nIf in the register method the component group is provided the component services is added\nto the list of component services of the component group creating a hierachical tree structure\nof component services.\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { SgComponentServiceWithChildren } from \"./sg-component-service-with-children.service\";\r\nimport { SgRootComponentConfig } from '../../models/sg-component/sg-root-component-config.model';\r\nimport { InjectUtils } from '../../utils/inject-utils';\r\n\r\n/**\r\n * The singleton root component service where components register there component service.\r\n * \r\n * This makes it possible to retrieve a component service and maniplute it's component from \r\n * anywhere in the application.\r\n * \r\n * If in the register method the component group is provided the component services is added\r\n * to the list of component services of the component group creating a hierachical tree structure\r\n * of component services.\r\n */\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class SgRootComponentService extends SgComponentServiceWithChildren<SgRootComponentConfig> {\r\n\r\n    private componentConfigDefault: SgRootComponentConfig = {\r\n        name: \"root\",\r\n        show: true,\r\n        className: \"root\"\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        InjectUtils.throwErrorIfExists(SgRootComponentService);\r\n        this.setComponentConfig(this.componentConfigDefault);\r\n    }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 25
            },
            "extends": "SgComponentServiceWithChildren",
            "type": "injectable"
        },
        {
            "name": "SgSelectComponentService",
            "id": "injectable-SgSelectComponentService-a579015405ccc61ad16e776f32a141da",
            "file": "projects/songlasses/src/lib/services/sg-component/sg-select-component.service.ts",
            "properties": [
                {
                    "name": "componentConfigDefault",
                    "defaultValue": "{\r\n        name: 'select',\r\n        show: true,\r\n        required: true,\r\n        itemMatchStrategy: 'startsWith',\r\n        itemValueField: SgSelectComponentService.DEFAULT_ITEMS_VALUE_FIELD,\r\n        itemDescriptionField: SgSelectComponentService.DEFAULT_ITEMS_DESCRIPTION_FIELD,\r\n        items: [],\r\n        className: ''\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SgSelectComponentConfig",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "DEFAULT_ITEMS_DESCRIPTION_FIELD",
                    "defaultValue": "'description'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        120,
                        123
                    ]
                },
                {
                    "name": "DEFAULT_ITEMS_VALUE_FIELD",
                    "defaultValue": "'value'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        120,
                        123
                    ]
                },
                {
                    "name": "hasValue",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "inheritance": {
                        "file": "SgComponentValueService"
                    }
                },
                {
                    "name": "value",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "V | null",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        120
                    ],
                    "inheritance": {
                        "file": "SgComponentValueService"
                    }
                },
                {
                    "name": "valueSubject",
                    "defaultValue": "new Subject<SgComponentValueEvent<V | null>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        120
                    ],
                    "inheritance": {
                        "file": "SgComponentValueService"
                    }
                },
                {
                    "name": "componentConfig",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T | null",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        120
                    ],
                    "inheritance": {
                        "file": "SgComponentService"
                    }
                },
                {
                    "name": "componentConfigSubject",
                    "defaultValue": "new Subject<SgComponentConfigEvent<T | null>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        120
                    ],
                    "inheritance": {
                        "file": "SgComponentService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getDefaults",
                    "args": [],
                    "optional": false,
                    "returnType": "SgSelectComponentConfig",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setDefaults",
                    "args": [
                        {
                            "name": "componentConfigDefault",
                            "type": "SgSelectComponentConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "componentConfigDefault",
                            "type": "SgSelectComponentConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearValue",
                    "args": [
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'service'"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen calling clear in the component then the event parameter should be set to 'component'\nbecause the component should have handled the clearing of the value and can with this event set\nfilter it own triggered event.\n",
                    "description": "<p>When calling clear in the component then the event parameter should be set to &#39;component&#39;\nbecause the component should have handled the clearing of the value and can with this event set\nfilter it own triggered event.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'service'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "SgComponentValueService"
                    }
                },
                {
                    "name": "getValue",
                    "args": [],
                    "optional": false,
                    "returnType": "V | null",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "SgComponentValueService"
                    }
                },
                {
                    "name": "getValueObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<SgComponentValueEvent<V | null>>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "SgComponentValueService"
                    }
                },
                {
                    "name": "sendComponentValue",
                    "args": [
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "\"service\""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "\"service\"",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "SgComponentValueService"
                    }
                },
                {
                    "name": "setHasValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "V | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "V | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "SgComponentValueService"
                    }
                },
                {
                    "name": "setValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "V | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'service'"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen calling set in the component then the event parameter should be set to 'component'\nbecause the component should have handled the setting of the value and can with this event set\nfilter it own triggered event.\n",
                    "description": "<p>When calling set in the component then the event parameter should be set to &#39;component&#39;\nbecause the component should have handled the setting of the value and can with this event set\nfilter it own triggered event.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1232,
                                "end": 1237,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "value"
                            },
                            "type": "V | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1226,
                                "end": 1231,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'service'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "SgComponentValueService"
                    }
                },
                {
                    "name": "getComponentConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "T | null",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "SgComponentService"
                    }
                },
                {
                    "name": "getComponentConfigObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<SgComponentConfigEvent<T | null>>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "SgComponentService"
                    }
                },
                {
                    "name": "getName",
                    "args": [],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "SgComponentService"
                    }
                },
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "SgComponentService"
                    }
                },
                {
                    "name": "refresh",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "SgComponentService"
                    }
                },
                {
                    "name": "sendComponentConfig",
                    "args": [
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "\"service\""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "\"service\"",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "SgComponentService"
                    }
                },
                {
                    "name": "setComponentConfig",
                    "args": [
                        {
                            "name": "componentConfig",
                            "type": "T | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "componentConfig",
                            "type": "T | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "SgComponentService"
                    }
                },
                {
                    "name": "show",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "SgComponentService"
                    }
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "SgComponentService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { SgSelectComponentConfig } from '../../models/sg-component/sg-select-component-config.model';\r\nimport { SgComponentValueService } from './sg-component-value.service';\r\n\r\n@Injectable()\r\nexport class SgSelectComponentService extends SgComponentValueService<SgSelectComponentConfig, string> {\r\n\r\n    private static DEFAULT_ITEMS_VALUE_FIELD: string = 'value';\r\n    private static DEFAULT_ITEMS_DESCRIPTION_FIELD: string = 'description';\r\n  \r\n    private componentConfigDefault: SgSelectComponentConfig = {\r\n        name: 'select',\r\n        show: true,\r\n        required: true,\r\n        itemMatchStrategy: 'startsWith',\r\n        itemValueField: SgSelectComponentService.DEFAULT_ITEMS_VALUE_FIELD,\r\n        itemDescriptionField: SgSelectComponentService.DEFAULT_ITEMS_DESCRIPTION_FIELD,\r\n        items: [],\r\n        className: ''\r\n    };\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    getDefaults(): SgSelectComponentConfig {\r\n        return this.componentConfigDefault;\r\n    }\r\n    \r\n    setDefaults(componentConfigDefault: SgSelectComponentConfig): void {\r\n        this.componentConfigDefault = componentConfigDefault;\r\n    }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 20
            },
            "extends": "SgComponentValueService",
            "type": "injectable"
        },
        {
            "name": "SgSidebarMenuService",
            "id": "injectable-SgSidebarMenuService-8ff88f487a3e6f1ddb370258158cb4fb",
            "file": "projects/songlasses/src/lib/services/sg-sidebar-menu/sg-sidebar-menu.service.ts",
            "properties": [
                {
                    "name": "sidebarMenu",
                    "defaultValue": "{\r\n        menuItemsStack: [[]]\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SgSidebarMenu",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "subject",
                    "defaultValue": "new Subject<SgSidebarMenu>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getSidebarMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "SgSidebarMenu",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSidebarMenuObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<SgSidebarMenu>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "popMenuItems",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "pushMenuItems",
                    "args": [
                        {
                            "name": "menuItems",
                            "type": "SgMenuItem[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "menuItems",
                            "type": "SgMenuItem[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "refresh",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "sendSidebarMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "setMenuItems",
                    "args": [
                        {
                            "name": "menuItems",
                            "type": "SgMenuItem[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "menuItems",
                            "type": "SgMenuItem[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSidebarMenu",
                    "args": [
                        {
                            "name": "sidebarMenu",
                            "type": "SgSidebarMenu",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "sidebarMenu",
                            "type": "SgSidebarMenu",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { SgMenuItem } from '../../models/sg-sidebar/sg-menu-item.model';\r\nimport { SgSidebarMenu } from '../../models/sg-sidebar/sg-sidebar-menu.model';\r\nimport { InjectUtils } from '../../utils/inject-utils';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class SgSidebarMenuService {\r\n\r\n    private sidebarMenu: SgSidebarMenu = {\r\n        menuItemsStack: [[]]\r\n    };\r\n\r\n    private subject = new Subject<SgSidebarMenu>();\r\n\r\n    constructor() {\r\n        InjectUtils.throwErrorIfExists(SgSidebarMenuService);\r\n    }\r\n\r\n    getSidebarMenuObservable(): Observable<SgSidebarMenu> {\r\n        return this.subject.asObservable();\r\n    }\r\n\r\n    getSidebarMenu(): SgSidebarMenu {\r\n        return this.sidebarMenu;\r\n    }\r\n\r\n    setSidebarMenu(sidebarMenu: SgSidebarMenu): void {\r\n        this.sidebarMenu = sidebarMenu;\r\n        this.subject.next(this.sidebarMenu);\r\n    }\r\n\r\n    refresh(): void {\r\n        this.sendSidebarMenu();\r\n    }\r\n\r\n    pushMenuItems(menuItems: SgMenuItem[]): void {\r\n        this.sidebarMenu.menuItemsStack.push(menuItems);\r\n        this.sendSidebarMenu();\r\n    }\r\n\r\n    popMenuItems(): void {\r\n        this.sidebarMenu.menuItemsStack.pop();\r\n        this.sendSidebarMenu();\r\n    }\r\n\r\n    setMenuItems(menuItems: SgMenuItem[]): void {\r\n        this.sidebarMenu.menuItemsStack[this.sidebarMenu.menuItemsStack.length-1] = menuItems;\r\n        this.sendSidebarMenu();\r\n    }\r\n\r\n    private sendSidebarMenu(): void {\r\n        this.subject.next(this.sidebarMenu);\r\n    }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            },
            "type": "injectable"
        },
        {
            "name": "SuperheroesService",
            "id": "injectable-SuperheroesService-f27d5c79a1422705bc4ab7605eb93f44",
            "file": "src/app/services/superheroes.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getSuperheroes",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Superhero[]>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Superhero } from '../models/superhero.model';\nimport { SUPERHEROES } from '../mocks/mock-superheroes';\nimport { Observable, of } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SuperheroesService {\n\n  constructor() { }\n\n  getSuperheroes(): Observable<Superhero[]> {\n    return of(SUPERHEROES);\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-ee2067dfb1c303f41003aea7d82d51e0",
            "file": "e2e/src/app.po.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  async navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl);\n  }\n\n  async getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText();\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<>",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ArrayUtils",
            "id": "class-ArrayUtils-05cd6ee72f643b2b12bff88be6e59318",
            "file": "projects/songlasses/src/lib/utils/array-utils.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class ArrayUtils {\r\n\r\n    static isArray<T>(object: T) {\r\n        return (object !== undefined && object !== null && typeof object === 'object' && Array.isArray(object));\r\n    }\r\n\r\n    /**\r\n     * Remove first element from the array where the predicate is true.\r\n     * @param arr\r\n     * @param predicate \r\n     * @returns \r\n     */\r\n     static remove<T>(arr: Array<T>, predicate: (value: T, index: number, obj: T[]) => unknown): Array<T> { \r\n        let index: number = arr.findIndex(predicate);\r\n        if (index > -1) {\r\n          arr.splice(index, 1);\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    /**\r\n     * Removing all items from the array. Use this method to keep references to the array alive.\r\n     * \r\n     * @param items \r\n     * @returns \r\n     */\r\n     static clear<T>(items: T[]) {\r\n        items.splice(0, items.length);\r\n        return items;\r\n    }\r\n\r\n\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "clear",
                    "args": [
                        {
                            "name": "items",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemoving all items from the array. Use this method to keep references to the array alive.\n\n",
                    "description": "<p>Removing all items from the array. Use this method to keep references to the array alive.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 738,
                                "end": 743,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "items"
                            },
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 732,
                                "end": 737,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "tagName": {
                                "pos": 754,
                                "end": 761,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "returns"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "isArray",
                    "args": [
                        {
                            "name": "object",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 3,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "object",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "arr",
                            "type": "Array<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "predicate",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                },
                                {
                                    "name": "index",
                                    "type": "number",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                },
                                {
                                    "name": "obj",
                                    "type": "T[]",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "Array<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemove first element from the array where the predicate is true.\n",
                    "description": "<p>Remove first element from the array where the predicate is true.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 284,
                                "end": 287,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "arr"
                            },
                            "type": "Array<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 278,
                                "end": 283,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 303,
                                "end": 312,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "predicate"
                            },
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                },
                                {
                                    "name": "index",
                                    "type": "number",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                },
                                {
                                    "name": "obj",
                                    "type": "T[]",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "pos": 297,
                                "end": 302,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "tagName": {
                                "pos": 323,
                                "end": 330,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "returns"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AssertUtils",
            "id": "class-AssertUtils-7410ec98d651ad17fe06c0e58dc291ec",
            "file": "projects/songlasses/src/lib/utils/assert-utils.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class AssertUtils {\r\n\r\n    /**\r\n     * Returns true if two source objects are the same.\r\n     *\r\n     * The source objects are stringified with JSON and then compared.\r\n     */\r\n    static equals<T, U>(source1: T, source2: U): boolean {\r\n        return JSON.stringify(source1) === JSON.stringify(source2);\r\n    }\r\n\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "equals",
                    "args": [
                        {
                            "name": "source1",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "source2",
                            "type": "U",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [
                        "T",
                        "U"
                    ],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns true if two source objects are the same.\n\nThe source objects are stringified with JSON and then compared.\n",
                    "description": "<p>Returns true if two source objects are the same.</p>\n<p>The source objects are stringified with JSON and then compared.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "source1",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "source2",
                            "type": "U",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CopyUtils",
            "id": "class-CopyUtils-0f2c52b3754f7095adb9c072c77a223f",
            "file": "projects/songlasses/src/lib/utils/copy-utils.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ArrayUtils } from \"./array-utils\";\r\nimport { ObjectUtils } from \"./object-utils\";\r\n\r\nexport class CopyUtils {\r\n\r\n    /**\r\n     * Copy items from sources to destination.\r\n     * \r\n     * @param destination\r\n     * @param sources\r\n     */\r\n     static copyArray(destination: any[], ...sources: any[][]): any[] {\r\n        return CopyUtils.internalCopyArray(true, destination, ...sources);\r\n    }\r\n\r\n    /**\r\n     * Copy properties from the source object(s) to the destination object.\r\n     * Override existing properties with properties from subsequent parameters.\r\n     * \r\n     * @param destination\r\n     * @param sources\r\n     */\r\n    static assign(destination: object, ...sources: object[]): object {\r\n        return CopyUtils.internalCopyObject(true, destination, ...sources);\r\n    }\r\n\r\n    /**\r\n     * Merge properties from the source object(s) which are not present in the destination object to the destination object.\r\n     * Does not override existing properties with properties from subsequent parameters.\r\n     * \r\n     * @param destination\r\n     * @param sources\r\n     */\r\n     static merge(destination: object, ...sources: object[]): object {\r\n        return CopyUtils.internalCopyObject(false, destination, ...sources);\r\n    }\r\n\r\n    /**\r\n     * Somewhat excesive statements just for preventing type check errors.\r\n     */\r\n    private static internalCopyObject(override: boolean, destination: object, ...sources: object[]): object {\r\n        if (!sources.length) {\r\n            return destination;\r\n        }\r\n        let source: object | undefined = sources.shift();\r\n        if (source !== undefined && ObjectUtils.isObject(destination) && ObjectUtils.isObject(source)) {\r\n            ObjectUtils.getKeys(source).forEach(key => {\r\n                if (source && (override || (!destination[key]))) {\r\n                    if (ObjectUtils.isObject(source[key])) {\r\n                        Object.assign(destination, { [key]: CopyUtils.internalCopyObject(override, {}, source[key] as object) });\r\n                    } else if (ArrayUtils.isArray(source[key])) {\r\n                        Object.assign(destination, { [key]: CopyUtils.internalCopyArray(override, [], source[key] as Array<any>) });\r\n                    } else {\r\n                        Object.assign(destination, { [key]: source[key] });\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        return CopyUtils.internalCopyObject(override, destination, ...sources);\r\n    }\r\n\r\n    /**\r\n     * Somewhat excesive statements just for preventing type check errors.\r\n     */\r\n     private static internalCopyArray(override: boolean, destination: any[] = [], ...sources: any[][]): any[] {\r\n        if (!sources.length) {\r\n            return destination;\r\n        }\r\n        let source: any[] | undefined = sources.shift();\r\n        if (source !== undefined && ArrayUtils.isArray(destination) && ArrayUtils.isArray(source)) {\r\n            source.forEach((item) => {\r\n                if (item) {\r\n                    if (ObjectUtils.isObject(item)) {\r\n                        CopyUtils.push(destination, CopyUtils.internalCopyObject(override, {}, item as object));\r\n                    } else if (ArrayUtils.isArray(item)) {\r\n                        CopyUtils.push(destination, CopyUtils.internalCopyArray(override, [], item as Array<any>));\r\n                    } else {\r\n                        destination[destination.length] = item;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        return CopyUtils.internalCopyArray(override, destination, ...sources);;\r\n    }\r\n\r\n    private static push<T>(destination: T[], item: T): T[] {\r\n        destination.push(item);\r\n        return destination;\r\n    }\r\n\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "assign",
                    "args": [
                        {
                            "name": "destination",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "sources",
                            "type": "object[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "object",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCopy properties from the source object(s) to the destination object.\nOverride existing properties with properties from subsequent parameters.\n\n",
                    "description": "<p>Copy properties from the source object(s) to the destination object.\nOverride existing properties with properties from subsequent parameters.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 595,
                                "end": 606,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "destination"
                            },
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 589,
                                "end": 594,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 622,
                                "end": 629,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "sources"
                            },
                            "type": "object[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "pos": 616,
                                "end": 621,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "copyArray",
                    "args": [
                        {
                            "name": "destination",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "sources",
                            "type": "any[][]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any[]",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCopy items from sources to destination.\n\n",
                    "description": "<p>Copy items from sources to destination.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 202,
                                "end": 213,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "destination"
                            },
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 196,
                                "end": 201,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 229,
                                "end": 236,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "sources"
                            },
                            "type": "any[][]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "pos": 223,
                                "end": 228,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "internalCopyArray",
                    "args": [
                        {
                            "name": "override",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "destination",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[]"
                        },
                        {
                            "name": "sources",
                            "type": "any[][]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any[]",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSomewhat excesive statements just for preventing type check errors.\n",
                    "description": "<p>Somewhat excesive statements just for preventing type check errors.</p>\n",
                    "modifierKind": [
                        120,
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "override",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "destination",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sources",
                            "type": "any[][]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "internalCopyObject",
                    "args": [
                        {
                            "name": "override",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "destination",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "sources",
                            "type": "object[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "object",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSomewhat excesive statements just for preventing type check errors.\n",
                    "description": "<p>Somewhat excesive statements just for preventing type check errors.</p>\n",
                    "modifierKind": [
                        120,
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "override",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "destination",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sources",
                            "type": "object[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "merge",
                    "args": [
                        {
                            "name": "destination",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "sources",
                            "type": "object[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "object",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMerge properties from the source object(s) which are not present in the destination object to the destination object.\nDoes not override existing properties with properties from subsequent parameters.\n\n",
                    "description": "<p>Merge properties from the source object(s) which are not present in the destination object to the destination object.\nDoes not override existing properties with properties from subsequent parameters.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1046,
                                "end": 1057,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "destination"
                            },
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1040,
                                "end": 1045,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 1073,
                                "end": 1080,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "sources"
                            },
                            "type": "object[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "pos": 1067,
                                "end": 1072,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "push",
                    "args": [
                        {
                            "name": "destination",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T[]",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120,
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "destination",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "FunctionUtils",
            "id": "class-FunctionUtils-825df44d37013450ec86c72b4f3147ad",
            "file": "projects/songlasses/src/lib/utils/function-utils.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class FunctionUtils {\r\n\r\n    static isFunction<T>(object: T) {\r\n        return (object !== undefined && object !== null && typeof object === 'function');\r\n    }\r\n\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "isFunction",
                    "args": [
                        {
                            "name": "object",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 3,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "object",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "InjectUtils",
            "id": "class-InjectUtils-bc3132083adc4dc44520bdd3ff247128",
            "file": "projects/songlasses/src/lib/utils/inject-utils.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { inject, InjectFlags, Type } from \"@angular/core\";\r\n\r\nexport class InjectUtils {\r\n\r\n    /**\r\n     * Throw error if the type is already instantiated.\r\n     * Use it to safeguard a singelton service.\r\n     * \r\n     * @param type \r\n     */\r\n    static throwErrorIfExists<T>(type: Type<T>) {\r\n        if (inject(type, InjectFlags.Optional | InjectFlags.SkipSelf) !== null) {\r\n            throw Error(`Trying to create multiple instances of singleton service ${type.name}.`);\r\n        }\r\n    }\r\n\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "throwErrorIfExists",
                    "args": [
                        {
                            "name": "type",
                            "type": "Type<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThrow error if the type is already instantiated.\nUse it to safeguard a singelton service.\n\n",
                    "description": "<p>Throw error if the type is already instantiated.\nUse it to safeguard a singelton service.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 230,
                                "end": 234,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "originalKeywordKind": 149,
                                "escapedText": "type"
                            },
                            "type": "Type<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 224,
                                "end": 229,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ObjectUtils",
            "id": "class-ObjectUtils-046aa82cc39c62470d06d8d13e330e35",
            "file": "projects/songlasses/src/lib/utils/object-utils.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class ObjectUtils {\r\n\r\n    static isObject<T>(object: T) {\r\n        return (object !== undefined && object !== null && typeof object === 'object' && !Array.isArray(object));\r\n    }\r\n\r\n    static getKeys<T>(obj: T): Array<keyof T> {\r\n        if (obj === undefined || obj === null) return [];\r\n        return Object.keys(obj) as Array<keyof T>;\r\n    }\r\n\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "getKeys",
                    "args": [
                        {
                            "name": "obj",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Array<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isObject",
                    "args": [
                        {
                            "name": "object",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 3,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "object",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SgComponentService",
            "id": "class-SgComponentService-b9d8cbab0e8da8b8072b8db3a5a325d1",
            "file": "projects/songlasses/src/lib/services/sg-component/sg-component.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { SgComponentConfig } from \"../../models/sg-component/sg-component-config.model\";\r\nimport { Observable, Subject } from \"rxjs\";\r\nimport { SgComponentConfigEvent } from \"../../models/sg-component/sg-component-config-event.model\";\r\n\r\n/**\r\n * Class for a component service.\r\n * \r\n * The component service is used to access and manipulate a component without exposing the component.\r\n * The component should register the component service with the ComponentServicesService.\r\n */\r\nexport class SgComponentService<T extends SgComponentConfig>  {\r\n   \r\n    private componentConfig: T | null = null;\r\n\r\n    private componentConfigSubject = new Subject<SgComponentConfigEvent<T | null>>();\r\n\r\n    constructor() {}\r\n\r\n    getName(): string | null {\r\n        if (this.componentConfig !== undefined && this.componentConfig !== null &&\r\n            this.componentConfig.name !== undefined && this.componentConfig.name !== null) {\r\n            return this.componentConfig.name;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    getComponentConfigObservable(): Observable<SgComponentConfigEvent<T | null>> {\r\n        return this.componentConfigSubject;\r\n    }\r\n\r\n    getComponentConfig(): T | null {\r\n        return this.componentConfig;\r\n    }\r\n\r\n    setComponentConfig(componentConfig: T | null): void {\r\n        this.componentConfig = componentConfig\r\n        this.sendComponentConfig();\r\n    }\r\n\r\n    refresh(): void {\r\n        this.sendComponentConfig();\r\n    }\r\n    \r\n    toggle(): void {\r\n        if (this.componentConfig) {\r\n            this.componentConfig.show = !this.componentConfig.show;\r\n            this.sendComponentConfig();\r\n        }\r\n    }\r\n\r\n    show(): void {\r\n        if (this.componentConfig) {\r\n            this.componentConfig.show = true;\r\n            this.sendComponentConfig();\r\n        }\r\n    }\r\n\r\n    hide(): void {\r\n        if (this.componentConfig) {\r\n            this.componentConfig.show = false;\r\n            this.sendComponentConfig();\r\n        }\r\n    }\r\n\r\n    protected sendComponentConfig(event: string = \"service\"): void {\r\n        let componentServiceEvent: SgComponentConfigEvent<T> = {\r\n            event: event,\r\n            componentConfig: this.componentConfig\r\n        }\r\n        this.componentConfigSubject.next(componentServiceEvent);\r\n    }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "properties": [
                {
                    "name": "componentConfig",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T | null",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "componentConfigSubject",
                    "defaultValue": "new Subject<SgComponentConfigEvent<T | null>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "description": "<p>Class for a component service.</p>\n<p>The component service is used to access and manipulate a component without exposing the component.\nThe component should register the component service with the ComponentServicesService.</p>\n",
            "rawdescription": "\n\nClass for a component service.\n\nThe component service is used to access and manipulate a component without exposing the component.\nThe component should register the component service with the ComponentServicesService.\n",
            "methods": [
                {
                    "name": "getComponentConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "T | null",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getComponentConfigObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<SgComponentConfigEvent<T | null>>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getName",
                    "args": [],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "refresh",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "sendComponentConfig",
                    "args": [
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "\"service\""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "\"service\"",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setComponentConfig",
                    "args": [
                        {
                            "name": "componentConfig",
                            "type": "T | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "componentConfig",
                            "type": "T | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "show",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SgComponentServiceWithChildren",
            "id": "class-SgComponentServiceWithChildren-9f74cb42c8e7911ca2ef17fea9ba2273",
            "file": "projects/songlasses/src/lib/services/sg-component/sg-component-service-with-children.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { SgComponentConfig } from \"../../models/sg-component/sg-component-config.model\"\r\nimport { SgComponentService } from \"./sg-component.service\";\r\nimport { ArrayUtils } from \"../../utils/array-utils\";\r\n\r\n/**\r\n * Class for a component service with child component services.\r\n */\r\nexport class SgComponentServiceWithChildren<T extends SgComponentConfig>\r\n    extends SgComponentService<T> {\r\n\r\n    private logColor: string = \"green\";\r\n    private logPaddingLeft: number = 10;\r\n\r\n    private componentServices: SgComponentService<SgComponentConfig>[] = [];\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    register(componentService: SgComponentService<SgComponentConfig>): void {\r\n        this.componentServices.push(componentService);\r\n    }\r\n\r\n    unregister(componentService: SgComponentService<SgComponentConfig>): void {\r\n        ArrayUtils.remove(this.componentServices, this.getNamePredicate(componentService));\r\n    }\r\n\r\n    getComponentService(name: string): SgComponentService<SgComponentConfig> | undefined {\r\n        return this.getComponentServiceFromComponentServices(name, this.componentServices);\r\n    }\r\n\r\n    getComponentServices(): SgComponentService<SgComponentConfig>[] {\r\n        return this.componentServices;\r\n    }\r\n\r\n    /**\r\n     * Convenience method to log the component services structure to the console.\r\n     * \r\n     * @param componentServices\r\n     * @param level \r\n     */\r\n     log(level: number = 1): void {\r\n        if (level === 1) {\r\n            console.log(`%cComponentServices structure`, `color: ${this.logColor};`);\r\n        }\r\n        console.log(`%cLevel %c${level}: %o`, \r\n            `padding-left: ${this.logPaddingLeft * (level - 1)}px;color: ${this.logColor};`, \r\n            `color: ${this.logColor};`,\r\n            this.getComponentConfig());\r\n        this.componentServices.forEach((componentService, index) => {\r\n            console.log(`%cComponent Service: %o`, \r\n                `padding-left: ${this.logPaddingLeft * (level - 1)}px;color: ${this.logColor};`, \r\n                componentService);\r\n            if (componentService instanceof SgComponentServiceWithChildren) {\r\n                (componentService as SgComponentServiceWithChildren<SgComponentConfig>).log(++level);\r\n                level--;\r\n            }\r\n        });\r\n    }\r\n\r\n    protected getNamePredicate(componentService: SgComponentService<SgComponentConfig>): \r\n        (value: SgComponentService<SgComponentConfig>, index: number, obj: SgComponentService<SgComponentConfig>[]) => unknown {\r\n        return (cs: SgComponentService<SgComponentConfig>) => cs.getName() === componentService.getName();        \r\n    }\r\n\r\n    protected getComponentServiceFromComponentServices(name: string, componentServices: SgComponentService<SgComponentConfig>[]): \r\n        SgComponentService<SgComponentConfig> | undefined {\r\n        let returnComponentService: SgComponentService<SgComponentConfig> | undefined;\r\n        componentServices.every(componentService => {\r\n            if (componentService.getName() === name) {\r\n                returnComponentService = componentService;\r\n            }\r\n            if (returnComponentService === undefined && componentService instanceof SgComponentServiceWithChildren) {\r\n                returnComponentService = (componentService as SgComponentServiceWithChildren<SgComponentConfig>).getComponentService(name);\r\n            }\r\n            if (returnComponentService !== undefined) {\r\n                return false;\r\n            }\r\n            return true;\r\n        });\r\n        return returnComponentService;\r\n    }\r\n        \r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "properties": [
                {
                    "name": "componentServices",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SgComponentService<SgComponentConfig>[]",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "logColor",
                    "defaultValue": "\"green\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "logPaddingLeft",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "componentConfig",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T | null",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        120
                    ],
                    "inheritance": {
                        "file": "SgComponentService"
                    }
                },
                {
                    "name": "componentConfigSubject",
                    "defaultValue": "new Subject<SgComponentConfigEvent<T | null>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        120
                    ],
                    "inheritance": {
                        "file": "SgComponentService"
                    }
                }
            ],
            "description": "<p>Class for a component service with child component services.</p>\n",
            "rawdescription": "\n\nClass for a component service with child component services.\n",
            "methods": [
                {
                    "name": "getComponentService",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SgComponentService | undefined",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getComponentServiceFromComponentServices",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "componentServices",
                            "type": "SgComponentService<SgComponentConfig>[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SgComponentService | undefined",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "componentServices",
                            "type": "SgComponentService<SgComponentConfig>[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getComponentServices",
                    "args": [],
                    "optional": false,
                    "returnType": "SgComponentService[]",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getNamePredicate",
                    "args": [
                        {
                            "name": "componentService",
                            "type": "SgComponentService<SgComponentConfig>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "componentService",
                            "type": "SgComponentService<SgComponentConfig>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "level",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "1"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nConvenience method to log the component services structure to the console.\n\n",
                    "description": "<p>Convenience method to log the component services structure to the console.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1398,
                                "end": 1403,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "level"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "1",
                            "tagName": {
                                "pos": 1392,
                                "end": 1397,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "componentService",
                            "type": "SgComponentService<SgComponentConfig>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "componentService",
                            "type": "SgComponentService<SgComponentConfig>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unregister",
                    "args": [
                        {
                            "name": "componentService",
                            "type": "SgComponentService<SgComponentConfig>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "componentService",
                            "type": "SgComponentService<SgComponentConfig>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getComponentConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "T | null",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "SgComponentService"
                    }
                },
                {
                    "name": "getComponentConfigObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<SgComponentConfigEvent<T | null>>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "SgComponentService"
                    }
                },
                {
                    "name": "getName",
                    "args": [],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "SgComponentService"
                    }
                },
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "SgComponentService"
                    }
                },
                {
                    "name": "refresh",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "SgComponentService"
                    }
                },
                {
                    "name": "sendComponentConfig",
                    "args": [
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "\"service\""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "\"service\"",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "SgComponentService"
                    }
                },
                {
                    "name": "setComponentConfig",
                    "args": [
                        {
                            "name": "componentConfig",
                            "type": "T | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "componentConfig",
                            "type": "T | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "SgComponentService"
                    }
                },
                {
                    "name": "show",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "SgComponentService"
                    }
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "SgComponentService"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "SgComponentService",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SgComponentValueService",
            "id": "class-SgComponentValueService-4d96ea4aff619db4c375bcf4b566effb",
            "file": "projects/songlasses/src/lib/services/sg-component/sg-component-value.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { SgComponentConfig } from \"../../models/sg-component/sg-component-config.model\";\r\nimport { SgComponentService } from \"./sg-component.service\";\r\nimport { Observable, Subject } from \"rxjs\";\r\nimport { SgComponentValueEvent } from \"../../models/sg-component/sg-component-value-event.model\";\r\nimport { SgComponentHasValueService } from \"./sg-component-has-value.service\";\r\n\r\n/**\r\n * Class for a component service with a value.\r\n */\r\nexport class SgComponentValueService<T extends SgComponentConfig, V> extends SgComponentService<T>\r\n    implements SgComponentHasValueService<V> {\r\n    \r\n    private value: V | null = null;\r\n\r\n    private valueSubject = new Subject<SgComponentValueEvent<V | null>>();\r\n\r\n    hasValue: boolean = false;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    getValueObservable(): Observable<SgComponentValueEvent<V | null>> {\r\n        return this.valueSubject;\r\n    }\r\n\r\n    getValue(): V | null {\r\n        return this.value;\r\n    }\r\n\r\n    /**\r\n     * When calling set in the component then the event parameter should be set to 'component'\r\n     * because the component should have handled the setting of the value and can with this event set\r\n     * filter it own triggered event.\r\n     * @param value\r\n     * @param broadcast \r\n     */\r\n    setValue(value: V | null, event: string = 'service'): void {\r\n        this.value = value;\r\n        this.setHasValue(this.value);\r\n        this.sendComponentValue(event);\r\n    }\r\n\r\n    /**\r\n     * When calling clear in the component then the event parameter should be set to 'component'\r\n     * because the component should have handled the clearing of the value and can with this event set\r\n     * filter it own triggered event.\r\n     * @param value\r\n     * @param broadcast \r\n     */\r\n     clearValue(event: string = 'service'): void {\r\n        this.value = null;\r\n        this.setHasValue(this.value);\r\n        this.sendComponentValue(event);\r\n    }\r\n\r\n    protected setHasValue(value: V | null | undefined): void {\r\n        this.hasValue = value !== undefined && value !== null;\r\n    }\r\n\r\n    protected sendComponentValue(event: string = \"service\"): void {\r\n        let componentServiceEvent: SgComponentValueEvent<V | null> = {\r\n            event: event,\r\n            value: this.value\r\n        }\r\n        this.valueSubject.next(componentServiceEvent);\r\n    }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 17
            },
            "properties": [
                {
                    "name": "hasValue",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "value",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "V | null",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "valueSubject",
                    "defaultValue": "new Subject<SgComponentValueEvent<V | null>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "componentConfig",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T | null",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        120
                    ],
                    "inheritance": {
                        "file": "SgComponentService"
                    }
                },
                {
                    "name": "componentConfigSubject",
                    "defaultValue": "new Subject<SgComponentConfigEvent<T | null>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        120
                    ],
                    "inheritance": {
                        "file": "SgComponentService"
                    }
                }
            ],
            "description": "<p>Class for a component service with a value.</p>\n",
            "rawdescription": "\n\nClass for a component service with a value.\n",
            "methods": [
                {
                    "name": "clearValue",
                    "args": [
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'service'"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen calling clear in the component then the event parameter should be set to 'component'\nbecause the component should have handled the clearing of the value and can with this event set\nfilter it own triggered event.\n",
                    "description": "<p>When calling clear in the component then the event parameter should be set to &#39;component&#39;\nbecause the component should have handled the clearing of the value and can with this event set\nfilter it own triggered event.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'service'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getValue",
                    "args": [],
                    "optional": false,
                    "returnType": "V | null",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getValueObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<SgComponentValueEvent<V | null>>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "sendComponentValue",
                    "args": [
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "\"service\""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "\"service\"",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setHasValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "V | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "V | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "V | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'service'"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen calling set in the component then the event parameter should be set to 'component'\nbecause the component should have handled the setting of the value and can with this event set\nfilter it own triggered event.\n",
                    "description": "<p>When calling set in the component then the event parameter should be set to &#39;component&#39;\nbecause the component should have handled the setting of the value and can with this event set\nfilter it own triggered event.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1232,
                                "end": 1237,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "value"
                            },
                            "type": "V | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1226,
                                "end": 1231,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'service'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getComponentConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "T | null",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "SgComponentService"
                    }
                },
                {
                    "name": "getComponentConfigObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<SgComponentConfigEvent<T | null>>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "SgComponentService"
                    }
                },
                {
                    "name": "getName",
                    "args": [],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "SgComponentService"
                    }
                },
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "SgComponentService"
                    }
                },
                {
                    "name": "refresh",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "SgComponentService"
                    }
                },
                {
                    "name": "sendComponentConfig",
                    "args": [
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "\"service\""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "\"service\"",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "SgComponentService"
                    }
                },
                {
                    "name": "setComponentConfig",
                    "args": [
                        {
                            "name": "componentConfig",
                            "type": "T | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "componentConfig",
                            "type": "T | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "SgComponentService"
                    }
                },
                {
                    "name": "show",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "SgComponentService"
                    }
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "SgComponentService"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "SgComponentService",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "SgComponentHasValueService"
            ]
        },
        {
            "name": "SgMenuItem",
            "id": "class-SgMenuItem-7120f1a520b95c93e12f8a823385edd6",
            "file": "projects/songlasses/src/lib/models/sg-sidebar/sg-menu-item.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class SgMenuItem {\r\n\r\n    subHeader?: string;\r\n    label?: string;\r\n    icon?: string;\r\n    routerLink?: any;\r\n    href?: string;\r\n    hrefTarget?: string;\r\n    // Action is a function where the event and an item is passed to.\r\n    // Action should return true when the menu shoud be closed, otherwise false.\r\n    action?: (event?: any, item?: SgMenuItem) => boolean; \r\n    menuItems?: SgMenuItem[];\r\n    divider?: boolean;\r\n    disabled?: boolean;\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "divider",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "href",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "hrefTarget",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "menuItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SgMenuItem[]",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "routerLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "subHeader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                }
            ],
            "description": "<p>Restrictions:</p>\n<ul>\n<li>label is required if a href, routerlink or action is set</li>\n<li>only one of href, routerlink or action should be set</li>\n<li>hrefTarget is only used if the href is set</li>\n</ul>\n<p>It is possible to set the header, label and divider in one menu items.</p>\n",
            "rawdescription": "\n\nRestrictions:\n- label is required if a href, routerlink or action is set\n- only one of href, routerlink or action should be set\n- hrefTarget is only used if the href is set\n\nIt is possible to set the header, label and divider in one menu items.\n",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "SgGroupComponentDirective",
            "id": "directive-SgGroupComponentDirective-dad0470f060092c860702e4045c694ac",
            "file": "projects/songlasses/src/lib/directives/sg-component/group-component.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, Input, OnInit, Optional, SkipSelf } from '@angular/core';\r\nimport { SgGroupComponentConfig } from '../../models/sg-component/sg-group-component-config.model';\r\nimport { SgGroupComponentService } from '../../services/sg-component/sg-group-component.service';\r\nimport { SgRootComponentService } from '../../services/sg-component/sg-root-component.service';\r\nimport { CopyUtils } from '../../utils/copy-utils';\r\n\r\n@Directive({\r\n    selector: '[groupComponent]',\r\n    providers: [ SgGroupComponentService ]\r\n})\r\nexport class SgGroupComponentDirective implements OnInit  {\r\n\r\n    @Input() componentConfig: SgGroupComponentConfig = this.groupComponentService.getDefaults();\r\n\r\n    constructor(private groupComponentService: SgGroupComponentService, \r\n        @Optional() @SkipSelf() private parentGroupComponentService: SgGroupComponentService | null, \r\n        private rootComponentService: SgRootComponentService) {\r\n    }\r\n\r\n    ngOnInit() {\r\n        CopyUtils.merge(this.componentConfig, this.groupComponentService.getDefaults());\r\n        this.groupComponentService.setComponentConfig(this.componentConfig);\r\n        if (this.parentGroupComponentService !== null) {\r\n            this.parentGroupComponentService.register(this.groupComponentService);\r\n        } else {\r\n            this.rootComponentService.register(this.groupComponentService);\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.parentGroupComponentService !== null) {\r\n            this.parentGroupComponentService.unregister(this.groupComponentService);\r\n        } else {\r\n            this.rootComponentService.unregister(this.groupComponentService);\r\n        }\r\n    }\r\n\r\n}\r\n",
            "selector": "[groupComponent]",
            "providers": [
                {
                    "name": "SgGroupComponentService",
                    "type": "component"
                }
            ],
            "inputsClass": [
                {
                    "name": "componentConfig",
                    "defaultValue": "this.groupComponentService.getDefaults()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "SgGroupComponentConfig"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "groupComponentService",
                        "type": "SgGroupComponentService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "parentGroupComponentService",
                        "type": "SgGroupComponentService | null",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "rootComponentService",
                        "type": "SgRootComponentService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "groupComponentService",
                        "type": "SgGroupComponentService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "parentGroupComponentService",
                        "type": "SgGroupComponentService | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "rootComponentService",
                        "type": "SgRootComponentService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-a4aed75098a1ebb82a46a37a419f396e",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "menuItems",
                    "defaultValue": "[\r\n    {\r\n      label: 'Home',\r\n      routerLink: ['/']\r\n    },\r\n    {\r\n      divider: true\r\n    },\r\n    {\r\n      subHeader: 'Components'\r\n    },\r\n    {\r\n      label: 'Select',\r\n      routerLink: ['select']\r\n    },\r\n    {\r\n      label: 'Sidebar menu',\r\n      routerLink: ['sidebar-menu']\r\n    },\r\n    {\r\n      divider: true\r\n    },\r\n    {\r\n      subHeader: 'Services'\r\n    },\r\n    {\r\n      label: 'SgRootComponentService',\r\n      routerLink: ['services/root-component-service']\r\n    },\r\n    {\r\n      subHeader: 'Github'\r\n    },\r\n    {\r\n      label: 'songlasses',\r\n      href: 'https://github.com/metalisx/songlasses',\r\n      hrefTarget: '_blank'\r\n    }    \r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SgMenuItem[]",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { SgMenuItem } from 'songlasses';\r\nimport { SgSidebarMenuService } from 'songlasses';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n\r\n  private menuItems: SgMenuItem[] = [\r\n    {\r\n      label: 'Home',\r\n      routerLink: ['/']\r\n    },\r\n    {\r\n      divider: true\r\n    },\r\n    {\r\n      subHeader: 'Components'\r\n    },\r\n    {\r\n      label: 'Select',\r\n      routerLink: ['select']\r\n    },\r\n    {\r\n      label: 'Sidebar menu',\r\n      routerLink: ['sidebar-menu']\r\n    },\r\n    {\r\n      divider: true\r\n    },\r\n    {\r\n      subHeader: 'Services'\r\n    },\r\n    {\r\n      label: 'SgRootComponentService',\r\n      routerLink: ['services/root-component-service']\r\n    },\r\n    {\r\n      subHeader: 'Github'\r\n    },\r\n    {\r\n      label: 'songlasses',\r\n      href: 'https://github.com/metalisx/songlasses',\r\n      hrefTarget: '_blank'\r\n    }    \r\n  ];\r\n\r\n  constructor(private sgSidebarMenuService: SgSidebarMenuService) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.sgSidebarMenuService.setMenuItems(this.menuItems);\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "sgSidebarMenuService",
                        "type": "SgSidebarMenuService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 49,
                "jsdoctags": [
                    {
                        "name": "sgSidebarMenuService",
                        "type": "SgSidebarMenuService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<sg-app>\n\n    <ng-template #header>\n    </ng-template>\n\n    <ng-template #content>\n        <router-outlet></router-outlet>\n    </ng-template>\n\n    <ng-template #footer>\n    </ng-template>\n\n    <ng-template #sidebar>\n        <sg-sidebar-menu></sg-sidebar-menu>\n    </ng-template>\n\n</sg-app>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "What background color to use",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 711,
                            "end": 724,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 317,
                            "tagName": {
                                "pos": 712,
                                "end": 720,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "Button contents",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string"
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Is this the principal call to action on the page?",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean"
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "How large should the button be?",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-0368ba31f32dcbd90cb54a0bd661b89c",
            "file": "src/app/components/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [
                "./home.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./home.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1>Welcome</h1>\n<p>\n    Welcome to songlasses demo.\n</p>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-8f196770333aa216860a88c0b6b221aa",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "RootComponentServiceComponent",
            "id": "component-RootComponentServiceComponent-552123d45c12c2742a526d2dc19f830a",
            "file": "src/app/components/services/root-component-service/root-component-service.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root-component-service",
            "styleUrls": [
                "./root-component-service.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./root-component-service.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "items",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Superhero[]",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "sgGroupComponentConfigLevel1",
                    "defaultValue": "{\n    name: 'groupComponentLevel1'\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SgGroupComponentConfig",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "sgGroupComponentConfigLevel2_1",
                    "defaultValue": "{\n    name: 'groupComponentLevel2_1'\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SgGroupComponentConfig",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "sgGroupComponentConfigLevel2_2",
                    "defaultValue": "{\n    name: 'groupComponentLevel2_2'\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SgGroupComponentConfig",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "sgSelectComponentConfig2_1",
                    "defaultValue": "{\n    name: 'select2_1',\n    itemValueField: 'id',\n    itemDescriptionField: 'name',\n    items: this.items\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SgSelectComponentConfig",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "sgSelectComponentConfig2_2",
                    "defaultValue": "{\n    name: 'select2_2',\n    itemValueField: 'id',\n    itemDescriptionField: 'name',\n    items: this.items\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SgSelectComponentConfig",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "value2_1",
                    "defaultValue": "'JD'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "value2_2",
                    "defaultValue": "'BW'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 44
                }
            ],
            "methodsClass": [
                {
                    "name": "componentServiceToggleAllSelectComponents",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "componentServiceToggleGroupComponentLevel1",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "componentServiceToggleGroupComponentLevel2_1",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "componentServiceToggleSelectComponent2_1",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "rootComponentServiceLog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { SgRootComponentService } from 'songlasses';\nimport { SgGroupComponentConfig, SgSelectComponentConfig } from 'songlasses';\nimport { ArrayUtils, CopyUtils } from 'songlasses';\nimport { Superhero } from 'src/app/models/superhero.model';\nimport { SuperheroesService } from 'src/app/services/superheroes.service';\n\n@Component({\n  selector: 'app-root-component-service',\n  templateUrl: './root-component-service.component.html',\n  styleUrls: ['./root-component-service.component.scss']\n})\nexport class RootComponentServiceComponent implements OnInit {\n  \n  private items: Superhero[] = [];\n  \n  sgGroupComponentConfigLevel1: SgGroupComponentConfig = {\n    name: 'groupComponentLevel1'\n  }\n\n  sgGroupComponentConfigLevel2_1: SgGroupComponentConfig = {\n    name: 'groupComponentLevel2_1'\n  }\n\n  sgGroupComponentConfigLevel2_2: SgGroupComponentConfig = {\n    name: 'groupComponentLevel2_2'\n  }\n\n  sgSelectComponentConfig2_1: SgSelectComponentConfig = {\n    name: 'select2_1',\n    itemValueField: 'id',\n    itemDescriptionField: 'name',\n    items: this.items\n  }\n\n  sgSelectComponentConfig2_2: SgSelectComponentConfig = {\n    name: 'select2_2',\n    itemValueField: 'id',\n    itemDescriptionField: 'name',\n    items: this.items\n  }\n\n  value2_1: string = 'JD';\n  value2_2: string = 'BW';\n\n  constructor(private rootComponentService: SgRootComponentService, private superheroesService: SuperheroesService) { }\n\n  ngOnInit(): void {\n    this.superheroesService.getSuperheroes().subscribe(superheroes => {\n      ArrayUtils.clear(this.items);\n      CopyUtils.copyArray(this.items, superheroes);\n    });\n  }\n\n  componentServiceToggleGroupComponentLevel1(): void {\n    this.rootComponentService.getComponentService('groupComponentLevel1')?.toggle();\n  }\n\n  componentServiceToggleGroupComponentLevel2_1(): void {\n    this.rootComponentService.getComponentService('groupComponentLevel2_1')?.toggle();\n  }\n  \n  componentServiceToggleAllSelectComponents(): void {\n    this.rootComponentService.getComponentService('select2_1')?.toggle();\n    this.rootComponentService.getComponentService('select2_2')?.toggle();\n  }\n\n  componentServiceToggleSelectComponent2_1(): void {\n    this.rootComponentService.getComponentService('select2_1')?.toggle();\n  }\n\n  rootComponentServiceLog(): void {\n    this.rootComponentService.log();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./root-component-service.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "rootComponentService",
                        "type": "SgRootComponentService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "superheroesService",
                        "type": "SuperheroesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "rootComponentService",
                        "type": "SgRootComponentService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "superheroesService",
                        "type": "SuperheroesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h2>SgRootComponentService</h2>\n<p>\n    The SgRootComponentService is a singleton service containing a hierarchical tree structure of ComponentService \n    implementations. The SgRootComponentService can be injected in every part of the application so you can retrieve \n    a ComponentService. With a ComponentService implementation you are able to access and manipulate the Component it\n    is connected to. Depending on the implementation you could for instance call show and hide methods on the \n    ComponentService to manipulate the appearance of the Component.<br/>\n    You can retrieve a single ComponentService or retrieve the hierarchical tree structure of ComponentServices \n    to filter out the ComponentServices you are interested in.\n</p>\n<h3>Hierachical tree structure</h3>\n<p>\n    The SgRootComponentService hierarchical tree structure is componsed out of ComponentService implementations. The\n    SgComponentServiceWithChildren extends ComponentService with the ability to register ComponentServices. By nesting \n    SgComponentServiceWithChildren instances it is possible to create the hierachical tree structure of ComponentServices.\n    A sub class of SgComponentServiceWithChildren is the GroupComponentService.\n</p>\n<h3>Registration of ComponentService</h3>\n<p>\n    The ComponentService is created and registered by a Component<br/>\n</p>\n<h3>Registration of GroupComponentService</h3>\n<p>\n    A GroupComponentService can be created by specifying the GroupComponentDirective on a container. For example on \n    a div or a span element. This will mark the container as a GroupComponent and register the GroupComponentService \n    at the parent GroupComponentService or at the root in the SgRootComponentService. Created ComponentServices \n    in the container are registered with the GroupComponentService making the hierachical tree structure possible.\n</p>\n<h3>CompentServicesService methods</h3>\n<table>\n    <tr>\n        <td>register(componentService, groupCompnentService)</td>\n        <td>Register a ComponentService. If the second parameter is provided then the ComponentService is registered\n            in the GroupComponentService provided in the second parameter otherwise it is registered as a root \n            ComponentService. The register method is called in ngOnInit method.\n        </td>\n    </tr>\n    <tr>\n        <td>unregister(componentService, groupCompnentService)</td>\n        <td>Unregister a ComponentService. If the second parameter is provided then the ComponentService is \n            unregistered from the GroupComponentService provided as the second parameter otherwise it is unregistered \n            from the root. The unregister method is called in the ngOnDestroy method of the same class as where the \n            register method is called from.\n        </td>\n    </tr>\n    <tr>\n        <td>getComponentService(name)</td>\n        <td>Retrieve a ComponentService by name from the hierachical tree structure of ComponentServices.</td>\n    </tr>\n    <tr>\n        <td>getComponentServices()</td>\n        <td>Retrieve the hierachical tree structure of ComponentServices</td>\n    </tr>\n    <tr>\n        <td>log()</td>\n        <td>Prints the hierachical tree structure to the browsers console.</td>\n    </tr>\n</table>\n\n<h2>SgRootComponentService hierachical tree structure of component services example</h2>\n<div groupComponent [componentConfig]=\"sgGroupComponentConfigLevel1\">\n    <ng-container *ngIf=\"sgGroupComponentConfigLevel1.show\">\n        <p>Group 1</p>\n        <div style=\"padding-left: 20px\" groupComponent [componentConfig]=\"sgGroupComponentConfigLevel2_1\">\n            <ng-container *ngIf=\"sgGroupComponentConfigLevel2_1.show\">\n                <p>Group 2.1</p>\n                <sg-select [(ngModel)]=\"value2_1\" [componentConfig]=\"sgSelectComponentConfig2_1\"></sg-select>\n            </ng-container>\n        </div>\n        <div style=\"padding-left: 20px\" groupComponent [componentConfig]=\"sgGroupComponentConfigLevel2_2\">\n            <ng-container *ngIf=\"sgGroupComponentConfigLevel2_2.show\">\n                <p>Group 2.2</p>\n                <sg-select [(ngModel)]=\"value2_2\" [componentConfig]=\"sgSelectComponentConfig2_2\"></sg-select>\n            </ng-container>\n        </div>\n    </ng-container>\n</div>\n<div>\n    <button (click)=\"componentServiceToggleGroupComponentLevel1()\">Toggle group 1</button>\n    <button (click)=\"componentServiceToggleGroupComponentLevel2_1()\">Toggle group 2.1</button>\n    <button (click)=\"componentServiceToggleAllSelectComponents()\">Toggle select components</button>\n    <button (click)=\"componentServiceToggleSelectComponent2_1()\">Toggle select component group 2.1</button>\n</div>\n\n<h2>SgRootComponentService log method</h2>\n<p>\n    Log registered hierarchical tree structure of component services to the console.<br/>\n</p>\n<div>\n    <button (click)=\"rootComponentServiceLog()\">Log</button>\n</div>\n"
        },
        {
            "name": "SelectComponent",
            "id": "component-SelectComponent-ba57b3fedbf1b9ee7ffdee3c3d690fb6",
            "file": "src/app/components/select/select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-select",
            "styleUrls": [
                "./select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentValueManipulateValue",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String | null",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "items",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Superhero[]",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "sgSelectComponentConfig",
                    "defaultValue": "{\r\n    name: 'select',\r\n    required: true,\r\n    itemValueField: 'id',\r\n    itemDescriptionField: 'name',\r\n    items: this.items\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SgSelectComponentConfig",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "sgSelectComponentConfigManipulateValue",
                    "defaultValue": "{\r\n    name: 'selectManipulateValue',\r\n    itemValueField: 'id',\r\n    itemDescriptionField: 'name',\r\n    items: this.items\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SgSelectComponentConfig",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "sgSelectComponentConfigShowAndHide",
                    "defaultValue": "{\r\n    name: 'selectShowAndHide',\r\n    itemValueField: 'id',\r\n    itemDescriptionField: 'name',\r\n    items: this.items\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SgSelectComponentConfig",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "sgSelectComponentConfigStyled",
                    "defaultValue": "{\r\n    name: 'selectStyled',\r\n    required: true,\r\n    itemMatchStrategy: 'contains',\r\n    itemValueField: 'id',\r\n    itemDescriptionField: 'name',\r\n    items: this.items,\r\n    className: 'selectStyled'\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SgSelectComponentConfig",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "styles",
                    "defaultValue": "`<style>\r\n  .selectStyled.sg-select {\r\n    width: 50%;\r\n  }\r\n  .selectStyled.sg-select sg-select-input {\r\n    border: 1px solid #b07070;\r\n  }\r\n  .selectStyled.sg-select .sg-select-items {\r\n    border: 1px solid #a06060;\r\n  }\r\n  .selectStyled.sg-select .sg-select-items .sg-select-item {\r\n    background-color: #a06060;\r\n    color: #fff;\r\n  }\r\n  .selectStyled.sg-select .sg-select-items .sg-select-item:hover {\r\n    background-color: #904040;\r\n    color: #fff;\r\n  }\r\n  .selectStyled.sg-select .sg-select-items .sg-select-selected-item-active {\r\n    background-color: #702020;\r\n    color: #fff;\r\n  } \r\n</style>`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "stylesSafeHtml",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SafeHtml",
                    "optional": true,
                    "description": "",
                    "line": 79,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "value",
                    "defaultValue": "'JD'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "valueManipulateValue",
                    "defaultValue": "'SP'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "valueShowAndHide",
                    "defaultValue": "'LC'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "valueStyled",
                    "defaultValue": "'BW'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 50
                }
            ],
            "methodsClass": [
                {
                    "name": "clearManipulateValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getManipulateValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSelectComponentService",
                    "args": [
                        {
                            "name": "name",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SgSelectComponentService | undefined",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasValueManipulateValue",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hideShowAndHide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setManipulateValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showShowAndHide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleShowAndHide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\r\nimport { SgSelectComponentConfig, SgSelectComponentService  } from 'songlasses';\r\nimport { ArrayUtils, CopyUtils, SgRootComponentService } from 'songlasses';\r\nimport { SuperheroesService } from '../../services/superheroes.service';\r\nimport { Superhero } from '../../models/superhero.model';\r\n\r\n@Component({\r\n  selector: 'app-select',\r\n  templateUrl: './select.component.html',\r\n  styleUrls: ['./select.component.scss']\r\n})\r\nexport class SelectComponent implements OnInit {\r\n\r\n  private items: Superhero[] = [];\r\n\r\n  sgSelectComponentConfig: SgSelectComponentConfig = {\r\n    name: 'select',\r\n    required: true,\r\n    itemValueField: 'id',\r\n    itemDescriptionField: 'name',\r\n    items: this.items\r\n  }\r\n\r\n  sgSelectComponentConfigStyled: SgSelectComponentConfig = {\r\n    name: 'selectStyled',\r\n    required: true,\r\n    itemMatchStrategy: 'contains',\r\n    itemValueField: 'id',\r\n    itemDescriptionField: 'name',\r\n    items: this.items,\r\n    className: 'selectStyled'\r\n  }\r\n\r\n  sgSelectComponentConfigShowAndHide: SgSelectComponentConfig = {\r\n    name: 'selectShowAndHide',\r\n    itemValueField: 'id',\r\n    itemDescriptionField: 'name',\r\n    items: this.items\r\n  }\r\n\r\n  sgSelectComponentConfigManipulateValue: SgSelectComponentConfig = {\r\n    name: 'selectManipulateValue',\r\n    itemValueField: 'id',\r\n    itemDescriptionField: 'name',\r\n    items: this.items\r\n  }\r\n\r\n  value: string = 'JD';\r\n  valueStyled: string = 'BW';\r\n  valueShowAndHide: string = 'LC';\r\n  valueManipulateValue: string = 'SP';\r\n  currentValueManipulateValue: String| null = null;\r\n\r\n  public styles: string = `<style>\r\n  .selectStyled.sg-select {\r\n    width: 50%;\r\n  }\r\n  .selectStyled.sg-select sg-select-input {\r\n    border: 1px solid #b07070;\r\n  }\r\n  .selectStyled.sg-select .sg-select-items {\r\n    border: 1px solid #a06060;\r\n  }\r\n  .selectStyled.sg-select .sg-select-items .sg-select-item {\r\n    background-color: #a06060;\r\n    color: #fff;\r\n  }\r\n  .selectStyled.sg-select .sg-select-items .sg-select-item:hover {\r\n    background-color: #904040;\r\n    color: #fff;\r\n  }\r\n  .selectStyled.sg-select .sg-select-items .sg-select-selected-item-active {\r\n    background-color: #702020;\r\n    color: #fff;\r\n  } \r\n</style>`;\r\n\r\n  public stylesSafeHtml?: SafeHtml;\r\n  \r\n  constructor(private sanitizer: DomSanitizer, \r\n              private rootComponentService: SgRootComponentService,\r\n              private superheroesService: SuperheroesService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.stylesSafeHtml = this.sanitizer.bypassSecurityTrustHtml(this.styles);\r\n    this.superheroesService.getSuperheroes().subscribe(superheroes => {\r\n      ArrayUtils.clear(this.items);\r\n      CopyUtils.copyArray(this.items, superheroes);\r\n    });\r\n  }\r\n\r\n  private getSelectComponentService(name: string | undefined): SgSelectComponentService | undefined {\r\n    let selectComponentService: SgSelectComponentService | undefined;\r\n    if (name !== undefined) {\r\n      return this.rootComponentService.getComponentService(name) as unknown as SgSelectComponentService;\r\n    }\r\n    return selectComponentService;\r\n  }\r\n\r\n  toggleShowAndHide(): void {\r\n    let selectComponentService: SgSelectComponentService | undefined = this.getSelectComponentService(this.sgSelectComponentConfigShowAndHide.name);\r\n    if (selectComponentService !== undefined) {\r\n      selectComponentService.toggle();\r\n    }\r\n  }\r\n\r\n  showShowAndHide(): void {\r\n    let selectComponentService: SgSelectComponentService | undefined = this.getSelectComponentService(this.sgSelectComponentConfigShowAndHide.name);\r\n    if (selectComponentService !== undefined) {\r\n      selectComponentService.show();\r\n    }\r\n  }\r\n\r\n  hideShowAndHide(): void {\r\n    let selectComponentService: SgSelectComponentService | undefined = this.getSelectComponentService(this.sgSelectComponentConfigShowAndHide.name);\r\n    if (selectComponentService !== undefined) {\r\n      selectComponentService.hide();\r\n    }\r\n  }\r\n\r\n  clearManipulateValue(): void {\r\n    let selectComponentService: SgSelectComponentService | undefined = this.getSelectComponentService(this.sgSelectComponentConfigManipulateValue.name);\r\n    if (selectComponentService !== undefined) {\r\n      selectComponentService.clearValue();\r\n    }\r\n  }\r\n\r\n  getManipulateValue(): void {\r\n    let selectComponentService: SgSelectComponentService | undefined = this.getSelectComponentService(this.sgSelectComponentConfigManipulateValue.name);\r\n    if (selectComponentService !== undefined) {\r\n      this.currentValueManipulateValue = selectComponentService.getValue();\r\n    }\r\n  }\r\n\r\n  setManipulateValue(): void {\r\n    let selectComponentService: SgSelectComponentService | undefined = this.getSelectComponentService(this.sgSelectComponentConfigManipulateValue.name);\r\n    if (selectComponentService !== undefined) {\r\n      selectComponentService.setValue('OM');\r\n    }\r\n  }\r\n\r\n  hasValueManipulateValue(): boolean {\r\n    let selectComponentService: SgSelectComponentService | undefined = this.getSelectComponentService(this.sgSelectComponentConfigManipulateValue.name);\r\n    if (selectComponentService !== undefined) {\r\n      return selectComponentService.hasValue;\r\n    }\r\n    return false;\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./select.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "rootComponentService",
                        "type": "SgRootComponentService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "superheroesService",
                        "type": "SuperheroesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 79,
                "jsdoctags": [
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "rootComponentService",
                        "type": "SgRootComponentService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "superheroesService",
                        "type": "SuperheroesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h2>Select - Default</h2>\r\n<div>\r\n    <sg-select [(ngModel)]=\"value\" [componentConfig]=\"sgSelectComponentConfig\"></sg-select>\r\n</div>\r\nExternal value : {{value | json}}\r\n<div class=\"code-container\">\r\n    <div class=\"code-panel\">\r\n        <h6>Config</h6> \r\n        <textarea class=\"code\" readonly>{{sgSelectComponentConfig | json}}</textarea> \r\n    </div>\r\n</div>\r\n\r\n<h2>Select - Custom styled</h2>\r\n<p>\r\n    To style the component set the classname in the components config. In the example it is set \r\n    to select2 and some custom style is added to target the components elements.\r\n</p>\r\n<div [innerHTML]=\"stylesSafeHtml\"></div>\r\n<sg-select [(ngModel)]=\"valueStyled\" [componentConfig]=\"sgSelectComponentConfigStyled\"></sg-select>\r\n<div>\r\n    External value : {{valueStyled | json}}\r\n</div>\r\n<div class=\"code-container\">\r\n    <div class=\"code-panel\">\r\n        <h6>Config</h6> \r\n        <textarea class=\"code\" readonly>{{sgSelectComponentConfigStyled | json}}</textarea> \r\n    </div>\r\n    <div class=\"code-panel\">\r\n        <h6>Custom style</h6> \r\n        <textarea class=\"code\" readonly>{{styles}}</textarea> \r\n    </div>\r\n</div>\r\n\r\n<h2>SgSelectService toggle, show, hide and isVisible methods</h2>\r\n<p>\r\n    Show and hide the component by using the SgSelectService toggle, show and hide methods.<br/>\r\n    The show and hide buttons are toggled by using the SgSelectService isVisible method.\r\n</p>\r\n<sg-select [(ngModel)]=\"valueShowAndHide\" [componentConfig]=\"sgSelectComponentConfigShowAndHide\"></sg-select>\r\n<div>\r\n    External value : {{valueShowAndHide | json}}\r\n</div>\r\n<div>\r\n    <button *ngIf=\"!sgSelectComponentConfigShowAndHide.show\" (click)=\"showShowAndHide()\">Show</button> \r\n    <button *ngIf=\"sgSelectComponentConfigShowAndHide.show\" (click)=\"hideShowAndHide()\">Hide</button> \r\n    <button (click)=\"toggleShowAndHide()\">Toggle</button>\r\n</div>\r\n\r\n<h2>SgSelectService clear, set, get and hasValue methods</h2>\r\n<p>\r\n    clear, set and get the component value by using the SgSelectService clear, get and set methods.<br/>\r\n    The clear and get buttons are shown by using the SgSelectService hasValue method.\r\n</p>\r\n<sg-select [(ngModel)]=\"valueManipulateValue\" [componentConfig]=\"sgSelectComponentConfigManipulateValue\"></sg-select>\r\n<div>\r\n    External value : {{valueManipulateValue | json}}\r\n    getValue : {{currentValueManipulateValue | json}}\r\n</div>\r\n<div>\r\n    <button *ngIf=\"hasValueManipulateValue()\" (click)=\"clearManipulateValue()\">Clear value</button> \r\n    <button *ngIf=\"hasValueManipulateValue()\" (click)=\"getManipulateValue()\">Get value</button> \r\n    <button (click)=\"setManipulateValue()\">Set value</button> \r\n</div>\r\n"
        },
        {
            "name": "SgAppComponent",
            "id": "component-SgAppComponent-0c6c5211d5794b3fcd75b08084b78f1d",
            "file": "projects/songlasses/src/lib/components/sg-app/sg-app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sg-app",
            "styleUrls": [
                "./sg-app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sg-app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "app",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "SgApp"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "contentTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "'content'"
                        }
                    ]
                },
                {
                    "name": "footerTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "'footer'"
                        }
                    ]
                },
                {
                    "name": "headerTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "'header'"
                        }
                    ]
                },
                {
                    "name": "sidebarTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "'sidebar'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "hideSidebar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleIntegratedSidebar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleSidebar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ContentChild, Input, OnInit, TemplateRef } from '@angular/core';\r\nimport { SgApp } from '../../models/sg-app/sg-app.model';\r\nimport { SgAppService } from '../../services/sg-app/sg-app.service';\r\n\r\n@Component({\r\n  selector: 'sg-app',\r\n  templateUrl: './sg-app.component.html',\r\n  styleUrls: ['./sg-app.component.scss']\r\n})\r\nexport class SgAppComponent implements OnInit {\r\n  \r\n  @ContentChild('header')\r\n  headerTemplate!: TemplateRef<any>;\r\n\r\n  @ContentChild('content')\r\n  contentTemplate!: TemplateRef<any>;\r\n\r\n  @ContentChild('footer')\r\n  footerTemplate!: TemplateRef<any>;\r\n\r\n  @ContentChild('sidebar')\r\n  sidebarTemplate!: TemplateRef<any>;\r\n\r\n  @Input()\r\n  app!: SgApp;\r\n\r\n  constructor(private appService: SgAppService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.appService.getSidebarObservable().subscribe(app => {\r\n      this.app = app;\r\n    });\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    if (!this.app) {\r\n      // If an app object is not provided as component argument then use the default from the SgAppService\r\n      setTimeout(() => this.appService.refreshSidebar());\r\n    } else {\r\n      // If an app object is provided as component argument then set the app object in the SgAppService\r\n      this.appService.setSidebar(this.app);\r\n    }\r\n  }\r\n\r\n  hideSidebar() {\r\n    this.appService.hideSidebar();\r\n  }\r\n\r\n  toggleSidebar() {\r\n    if (this.app.showSidebar) {\r\n      this.appService.hideSidebar();\r\n    } else {\r\n      this.appService.showSidebar();\r\n    }\r\n  }\r\n\r\n  toggleIntegratedSidebar() {\r\n    if (this.app.showIntegratedSidebar) {\r\n      this.appService.hideIntegratedSidebar();\r\n    } else {\r\n      this.appService.showIntegratedSidebar();\r\n    }\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".sg-app {\r\n    min-height: 100%;\r\n    display: grid;\r\n    grid-template-columns: auto;\r\n    grid-template-rows: auto 1fr auto;\r\n    grid-template-areas:\r\n        \"header\"\r\n        \"content\"\r\n        \"footer\"\r\n        \"sidebar\"\r\n}\r\n.sg-app.sg-app-no-sidebar {\r\n    min-height: 100%;\r\n    display: grid;\r\n    grid-template-columns: auto;\r\n    grid-template-rows: auto 1fr auto;\r\n    grid-template-areas:\r\n        \"header\"\r\n        \"content\"\r\n        \"footer\"\r\n}\r\n.sg-app-header {\r\n    grid-area: header;\r\n    background-color: var(--sg-app-header-background-color);\r\n    color: var(--sg-app-header-color);\r\n    display: flex;\r\n    align-items: center;\r\n    min-height: var(--sg-app-header-min-height);\r\n    padding: var(--sg-app-header-padding);\r\n}\r\n.sg-app-sidebar-integrated .sg-app-header .sg-app-header-hamburger.sg-integrated-mobile {\r\n    display: block;\r\n}\r\n.sg-app-sidebar-integrated .sg-app-header .sg-app-header-hamburger.sg-integrated-desktop {\r\n    display: none;\r\n}\r\n.sg-app-content {\r\n    grid-area: content;\r\n}\r\n.sg-app-footer {\r\n    grid-area: footer;\r\n    background-color: var(--sg-app-footer-background-color);\r\n    color: var(--sg-app-footer-color);\r\n    display: flex;\r\n    align-items: center;\r\n    min-height: var(--sg-app-footer-min-height);\r\n    padding: var(--sg-app-footer-padding);\r\n}\r\n.sg-app-sidebar {\r\n    grid-area: sidebar;\r\n    display: flex;\r\n    flex-direction: column;\r\n    position: fixed;\r\n    top: 0;\r\n    left: -100%;\r\n    height: 100%;\r\n    min-width: 270px;\r\n    padding: 0px;\r\n    margin: 0px;\r\n    border: 0px;\r\n    background-color: var(--sg-app-sidebar-background-color);\r\n    z-index: var(--sg-app-sidebar-z-index);\r\n    opacity: 0;\r\n    transition: opacity 0s, left 0.5s;\r\n}\r\n.sg-app-sidebar-show .sg-app-sidebar {\r\n    opacity: 1;\r\n    left: 0;\r\n}\r\n.sg-app-sidebar-hide .sg-app-sidebar {\r\n    transition: opacity 0.5s, left 0.5s;\r\n}\r\n.sg-app-sidebar-overlay {\r\n    display: none;\r\n    position: fixed;\r\n    top: 0px;\r\n    left: 0px;\r\n    height: 100%;\r\n    min-height: 100px;\r\n    width: 100%;\r\n    padding: 0px;\r\n    margin: 0px;\r\n    border: 0px;\r\n    background-color: var(--sg-app-sidebar-overlay-background-color);\r\n    z-index: var(--sg-app-sidebar-overlay-z-index);\r\n}\r\n.sg-app-sidebar-show .sg-app-sidebar-overlay {\r\n    display: block;\r\n}\r\n.sg-app-sidebar-header {\r\n    display: flex;\r\n    align-items: center;\r\n    min-height: var(--sg-app-sidebar-header-min-height);\r\n    padding: var(--sg-app-sidebar-header-padding);\r\n    background-color: var(--sg-app-sidebar-header-background-color);\r\n}\r\n.sg-sidebar-hamburger {\r\n    display: flex;\r\n    align-items: center;\r\n\tpadding: var(--sg-sidebar-humburger-padding);\r\n    background-color: var(--sg-sidebar-hamburger-background-color);\r\n}\r\n.sg-sidebar-humburger-button-line {\r\n    fill: var(--sg-sidebar-hamburger-color);\r\n}\r\n.sg-sidebar-hamburger svg {\r\n    width: var(--sg-sidebar-hamburger-svg-icon-width);\r\n    height: var(--sg-sidebar-hamburger-svg-icon-height);\r\n    cursor: pointer;\r\n}\r\n@media (min-width: 601px) {\r\n    .sg-app {\r\n        grid-template-columns: auto;\r\n        grid-template-areas: \r\n            \"header\"\r\n            \"content\"\r\n            \"footer\"\r\n            \"sidebar\"\r\n    }\r\n    .sg-app.sg-app-no-sidebar {\r\n        grid-template-columns: auto;\r\n        grid-template-areas: \r\n            \"header\"\r\n            \"content\"\r\n            \"footer\"\r\n    }\r\n    .sg-app.sg-app-sidebar-integrated {\r\n        grid-template-columns: 250px auto;\r\n        grid-template-areas: \r\n            \"header header\"\r\n            \"sidebar content\"\r\n            \"footer footer\"\r\n    }\r\n    .sg-app.sg-app-sidebar-integrated.sg-app-sidebar-hide-integrated-sidebar {\r\n        grid-template-columns: auto;\r\n        grid-template-areas: \r\n            \"header\"\r\n            \"content\"\r\n            \"footer\"\r\n            \"sidebar\"\r\n    }\r\n    .sg-app.sg-app-sidebar-integrated.sg-app-sidebar-hide-integrated-sidebar .sg-app-sidebar {\r\n        display: none;\r\n    }\r\n    .sg-app-sidebar-integrated .sg-app-sidebar {\r\n        position: unset;\r\n        top: unset;\r\n        left: unset;\r\n        min-width: unset;\r\n        opacity: 1;\r\n        transition: unset;\r\n    }    \r\n    .sg-app-sidebar-integrated .sg-app-sidebar .sg-app-sidebar-header {\r\n        display: none;\r\n    }\r\n    .sg-app-sidebar-integrated.sg-app-sidebar-show-integrated-sidebar .sg-app-sidebar {\r\n        opacity: unset;\r\n        left: unset;\r\n    }\r\n    .sg-app-sidebar-integrated.sg-app-sidebar-hide-integrated-sidebar .sg-app-sidebar {\r\n        transition: unset;\r\n    }\r\n    .sg-app-sidebar-integrated .sg-app-sidebar-overlay {\r\n        display: none;\r\n    }\r\n    .sg-app-sidebar-integrated .sg-app-header .sg-app-header-hamburger.sg-integrated-mobile {\r\n        display: none;\r\n    }\r\n    .sg-app-sidebar-integrated .sg-app-header .sg-app-header-hamburger.sg-integrated-desktop {\r\n        display: block;\r\n    }\r\n}\r\n",
                    "styleUrl": "./sg-app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "appService",
                        "type": "SgAppService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "appService",
                        "type": "SgAppService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"app\" class=\"sg-app\"\r\n    [ngClass]=\"[app.sidebarType === 'no-sidebar' ? 'sg-app-no-sidebar' : '',\r\n                app.sidebarType === 'integrated-sidebar' ? 'sg-app-sidebar-integrated' : '',\r\n                app.showSidebar ? 'sg-app-sidebar-show' : 'sg-app-sidebar-hide',\r\n                app.showIntegratedSidebar ? 'sg-app-sidebar-show-integrated-sidebar' : 'sg-app-sidebar-hide-integrated-sidebar']\">\r\n    <ng-container *ngIf=\"headerTemplate\">\r\n        <header class=\"sg-app-header\">\r\n            <ng-container *ngIf=\"sidebarTemplate && app.sidebarType !== 'no-sidebar'\">\r\n                <div *ngIf=\"app.sidebarType === 'sliding-sidebar'\" class=\"sg-app-header-hamburger\">\r\n                    <div class=\"sg-sidebar-hamburger\" (click)=\"toggleSidebar()\">\r\n                        <svg class=\"sg-sidebar-hamburger-button\" viewBox=\"0 0 24 24\">\r\n                            <rect x=\"2\" y=\"4\" width=\"20\" height=\"4\" rx=\"2\" class=\"sg-sidebar-humburger-button-line\"/>\r\n                            <rect x=\"2\" y=\"10\" width=\"20\" height=\"4\" rx=\"2\" class=\"sg-sidebar-humburger-button-line\"/>\r\n                            <rect x=\"2\" y=\"16\" width=\"20\" height=\"4\" rx=\"2\" class=\"sg-sidebar-humburger-button-line\"/>\r\n                        </svg>\r\n                    </div>                           \r\n                </div>\r\n                <ng-container *ngIf=\"app.sidebarType === 'integrated-sidebar'\">\r\n                    <div class=\"sg-app-header-hamburger sg-integrated-mobile\">\r\n                        <div class=\"sg-sidebar-hamburger\" (click)=\"toggleSidebar()\">\r\n                            <svg class=\"sg-sidebar-hamburger-button\" viewBox=\"0 0 24 24\">\r\n                                <rect x=\"2\" y=\"4\" width=\"20\" height=\"4\" rx=\"2\" class=\"sg-sidebar-humburger-button-line\"/>\r\n                                <rect x=\"2\" y=\"10\" width=\"20\" height=\"4\" rx=\"2\" class=\"sg-sidebar-humburger-button-line\"/>\r\n                                <rect x=\"2\" y=\"16\" width=\"20\" height=\"4\" rx=\"2\" class=\"sg-sidebar-humburger-button-line\"/>\r\n                            </svg>\r\n                        </div>                           \r\n                    </div>\r\n                    <div class=\"sg-app-header-hamburger sg-integrated-desktop\">\r\n                        <div class=\"sg-sidebar-hamburger\" (click)=\"toggleIntegratedSidebar()\">\r\n                            <svg class=\"sg-sidebar-hamburger-button\" viewBox=\"0 0 24 24\">\r\n                                <rect x=\"2\" y=\"4\" width=\"20\" height=\"4\" rx=\"2\" class=\"sg-sidebar-humburger-button-line\"/>\r\n                                <rect x=\"2\" y=\"10\" width=\"20\" height=\"4\" rx=\"2\" class=\"sg-sidebar-humburger-button-line\"/>\r\n                                <rect x=\"2\" y=\"16\" width=\"20\" height=\"4\" rx=\"2\" class=\"sg-sidebar-humburger-button-line\"/>\r\n                            </svg>\r\n                        </div>                           \r\n                    </div>\r\n                </ng-container>\r\n            </ng-container>\r\n            <ng-container *ngTemplateOutlet=\"headerTemplate\"></ng-container>\r\n        </header>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"contentTemplate\">\r\n        <div class=\"sg-app-content\">\r\n            <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\r\n        </div>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"footerTemplate\">\r\n        <footer class=\"sg-app-footer\">\r\n            <ng-container *ngTemplateOutlet=\"footerTemplate\"></ng-container>\r\n        </footer>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"sidebarTemplate && app.sidebarType !== 'no-sidebar'\">\r\n        <div class=\"sg-app-sidebar\">\r\n            <div class=\"sg-app-sidebar-header\">\r\n                <div class=\"sg-sidebar-hamburger\" (click)=\"hideSidebar()\">\r\n                    <svg class=\"sg-sidebar-hamburger-button\" viewBox=\"0 0 24 24\">\r\n                        <rect x=\"2\" y=\"4\" width=\"20\" height=\"4\" rx=\"2\" class=\"sg-sidebar-humburger-button-line\"/>\r\n                        <rect x=\"2\" y=\"10\" width=\"20\" height=\"4\" rx=\"2\" class=\"sg-sidebar-humburger-button-line\"/>\r\n                        <rect x=\"2\" y=\"16\" width=\"20\" height=\"4\" rx=\"2\" class=\"sg-sidebar-humburger-button-line\"/>\r\n                    </svg>\r\n                </div>                \r\n            </div>\r\n            <ng-container *ngTemplateOutlet=\"sidebarTemplate\"></ng-container>\r\n        </div>\r\n        <div class=\"sg-app-sidebar-overlay\" (click)=\"hideSidebar()\"></div>\r\n    </ng-container>\r\n</div>\r\n"
        },
        {
            "name": "SgSelectComponent",
            "id": "component-SgSelectComponent-d0fa84f435fba8c5147c0aa1be697e8e",
            "file": "projects/songlasses/src/lib/components/sg-select/sg-select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "SgSelectComponentService",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => SgSelectComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "sg-select",
            "styleUrls": [
                "./sg-select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sg-select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "componentConfig",
                    "defaultValue": "this.selectComponentService.getDefaults()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "SgSelectComponentConfig"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "componentConfigObserverable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<SgComponentConfigEvent<SgSelectComponentConfig | null>>",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "externalValue",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "inputElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement>",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input'"
                        }
                    ]
                },
                {
                    "name": "internalValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "liElements",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<ElementRef<HTMLLIElement>>",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "decorators": [
                        {
                            "name": "ViewChildren",
                            "stringifiedArguments": "'item'"
                        }
                    ]
                },
                {
                    "name": "listItemsElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLUListElement>",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'listItems'"
                        }
                    ]
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "selectContainerElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLDivElement>",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'selectContainer'"
                        }
                    ]
                },
                {
                    "name": "selectedItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "showItems",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "valid",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "valueObserverable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<SgComponentValueEvent<string | null>>",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "writeValueIsCalledByOserver",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 182,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clickout",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:click', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "doHideItems",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 310,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doShowItems",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 304,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "focusOnInputElement",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 397,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "hasItemDescriptionField",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 162,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hasItemValueField",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 168,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 294,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isRequired",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 174,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isSelectedItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 299,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "keydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 188,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "keydownArrowdown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 334,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "keydownArrowup",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 325,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "keyup",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 210,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "moveElementInViewport",
                    "args": [
                        {
                            "name": "element",
                            "type": "Element",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "parentElement",
                            "type": "Element",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe method positions the native element to the parent element depending on the viewport.\n\nThe default position of the popup is below the parent.\nThen if the bottom is not in the viewport then a style is set to move it above the parent.\nThen if the top is not in the viewport then a style is set to set to make the popup small\nenough to fit in the viewport, the top and bottom are set to 0 and the max-height to 100vh.\n\nThe document.documentElement.clientHeight is used instead of the window.innerHeight because\nit does not include the height of the options rendered scrollbar.\n\nPre-requisits\nThe element has the css style position with value absolute and the parent has the css style\nposition with value relative.\n",
                    "description": "<p>The method positions the native element to the parent element depending on the viewport.</p>\n<p>The default position of the popup is below the parent.\nThen if the bottom is not in the viewport then a style is set to move it above the parent.\nThen if the top is not in the viewport then a style is set to set to make the popup small\nenough to fit in the viewport, the top and bottom are set to 0 and the max-height to 100vh.</p>\n<p>The document.documentElement.clientHeight is used instead of the window.innerHeight because\nit does not include the height of the options rendered scrollbar.</p>\n<p>Pre-requisits\nThe element has the css style position with value absolute and the parent has the css style\nposition with value relative.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "Element",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "parentElement",
                            "type": "Element",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 266,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 270,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "scrollIntoView",
                    "args": [
                        {
                            "name": "alignToTop",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 316,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "alignToTop",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "select",
                    "args": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 278,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectedIndex",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 401,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "selectNext",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 428,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "selectPrevious",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 417,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "disabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 274,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "disabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setExternalValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 385,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setItemByDescription",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 349,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setItemByProperty",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 355,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setItemByValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 343,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSelectedItem",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 362,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setValueFromSelectedItem",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 285,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "validateSelectComponentConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 252,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:click",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 96
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, forwardRef, HostListener, Input, OnInit, Optional, QueryList, Renderer2, ViewChild, ViewChildren } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { Observable } from 'rxjs';\r\nimport { SgComponentConfigEvent } from '../../models/sg-component/sg-component-config-event.model';\r\nimport { SgComponentValueEvent } from '../../models/sg-component/sg-component-value-event.model';\r\nimport { SgSelectComponentConfig } from '../../models/sg-component/sg-select-component-config.model';\r\nimport { SgGroupComponentService } from '../../services/sg-component/sg-group-component.service';\r\nimport { SgRootComponentService } from '../../services/sg-component/sg-root-component.service';\r\nimport { SgSelectComponentService } from '../../services/sg-component/sg-select-component.service';\r\nimport { CopyUtils } from '../../utils/copy-utils';\r\n\r\n@Component({\r\n  selector: 'sg-select',\r\n  templateUrl: './sg-select.component.html',\r\n  styleUrls: ['./sg-select.component.scss'],\r\n  providers: [\r\n    SgSelectComponentService,\r\n    { \r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => SgSelectComponent),\r\n      multi: true\r\n    }\r\n  ]    \r\n})\r\nexport class SgSelectComponent implements ControlValueAccessor, OnInit {\r\n\r\n  valid: boolean = true;\r\n  \r\n  @Input() componentConfig: SgSelectComponentConfig = this.selectComponentService.getDefaults();\r\n\r\n  @ViewChild('selectContainer') selectContainerElement!: ElementRef<HTMLDivElement>;\r\n  @ViewChild('input') inputElement!: ElementRef<HTMLInputElement>;\r\n  @ViewChild('listItems') listItemsElement!: ElementRef<HTMLUListElement>;\r\n  @ViewChildren('item') liElements!: QueryList<ElementRef<HTMLLIElement>>;\r\n\r\n  private internalValue: any;\r\n  private externalValue: string | null = null;\r\n\r\n  item?: any;\r\n  selectedItem?: any;\r\n\r\n  onChange: any = () => {};\r\n  onTouched: any = () => {};\r\n  disabled = false;\r\n  showItems: boolean = false;\r\n\r\n  // Hack to only call the service set method in the writeValue method when initializing the component.\r\n  // The service set method used in the writeValue method should be in a lifecycle but none works.\r\n  // Setting the property the true will prevent unneccessary calls to the service as it triggered the event.\r\n  private writeValueIsCalledByOserver: boolean = false;\r\n\r\n  private componentConfigObserverable: Observable<SgComponentConfigEvent<SgSelectComponentConfig | null>>;\r\n  private valueObserverable: Observable<SgComponentValueEvent<string | null>>;\r\n\r\n  /**\r\n   * The method positions the native element to the parent element depending on the viewport.\r\n   * \r\n   * The default position of the popup is below the parent.\r\n   * Then if the bottom is not in the viewport then a style is set to move it above the parent.\r\n   * Then if the top is not in the viewport then a style is set to set to make the popup small\r\n   * enough to fit in the viewport, the top and bottom are set to 0 and the max-height to 100vh.\r\n   * \r\n   * The document.documentElement.clientHeight is used instead of the window.innerHeight because\r\n   * it does not include the height of the options rendered scrollbar.\r\n   * \r\n   * Pre-requisits\r\n   * The element has the css style position with value absolute and the parent has the css style\r\n   * position with value relative.\r\n   */\r\n  moveElementInViewport(element: Element, parentElement: Element): void {\r\n    var rect = element.getBoundingClientRect();\r\n    var parentRect = parentElement.getBoundingClientRect();\r\n    if (rect.height > parentRect.top) {\r\n      // default\r\n    } else if (rect.top > 0 && rect.bottom > document.documentElement.clientHeight) {\r\n      this.renderer.setStyle(element, 'height', 'auto');\r\n      this.renderer.setStyle(element, 'top', 'auto');\r\n      this.renderer.setStyle(element, 'bottom', '100%');\r\n      this.renderer.setStyle(element, 'border-top', 'auto');\r\n      this.renderer.setStyle(element, 'border-bottom', '0');\r\n    } else if (rect.top < 0) {\r\n      // this.renderer.setStyle(element, 'height', '100vh');\r\n      // this.renderer.setStyle(element, 'top', '0');\r\n      // this.renderer.setStyle(element, 'bottom', '0');\r\n    } else { \r\n      // default\r\n      // this.renderer.setStyle(element, 'height', 'auto');\r\n      // this.renderer.setStyle(element, 'top', '100%');\r\n      // this.renderer.setStyle(element, 'bottom', 'auto');\r\n      // this.renderer.setStyle(element, 'border-top', '0');\r\n      // this.renderer.removeStyle(element, 'border-bottom');\r\n    }\r\n  }\r\n\r\n  @HostListener('document:click', ['$event'])\r\n  clickout(event: Event) {\r\n    if(!this.elementRef.nativeElement.contains(event.target) && this.showItems) {\r\n      this.doHideItems();\r\n    }\r\n  }\r\n  \r\n  constructor(private elementRef: ElementRef, private renderer: Renderer2,\r\n    private selectComponentService: SgSelectComponentService, \r\n    @Optional() private groupComponentService: SgGroupComponentService | null,\r\n    private rootComponentService: SgRootComponentService) {\r\n      // Create observable for the ComponentConfig in the ComponentService.\r\n      this.componentConfigObserverable = this.selectComponentService.getComponentConfigObservable();\r\n      // Create observable for the value in the component service.\r\n      this.valueObserverable = this.selectComponentService.getValueObservable();\r\n      // Register the ComponentService to the RootComponentService so the ComponentService can be accessed from anywhere in the application.\r\n      if (this.groupComponentService !== null) {\r\n        this.groupComponentService.register(this.selectComponentService);\r\n      } else {\r\n        this.rootComponentService.register(this.selectComponentService);\r\n      }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // Copy defaults to missing fields.\r\n    CopyUtils.merge(this.componentConfig, this.selectComponentService.getDefaults());\r\n    // First set ComponentConfig and value then subsribe to observables.\r\n    this.selectComponentService.setComponentConfig(this.componentConfig);\r\n    this.selectComponentService.setValue(this.externalValue);\r\n    // Subscribe to ComponentConfig changes from the ComponentService.\r\n    this.componentConfigObserverable.subscribe(sgComponentConfigEvent => {\r\n      // only listen to service events not initiated by this component\r\n      if (sgComponentConfigEvent.event !== 'component') {\r\n        this.componentConfig = sgComponentConfigEvent.componentConfig as SgSelectComponentConfig;\r\n      }\r\n    });\r\n    // Subscribe to value changes from the ComponentService.\r\n    this.valueObserverable.subscribe(sgComponentValueEvent => {\r\n      // only listen to service events not initiated by this component\r\n      if (sgComponentValueEvent.event !== 'component') {\r\n        this.writeValueIsCalledByOserver = true;\r\n        this.writeValue(sgComponentValueEvent.value); // will set the externalValue\r\n        this.validateSelectComponentConfig();\r\n      }\r\n    });\r\n    this.validateSelectComponentConfig();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.groupComponentService !== null) {\r\n      this.groupComponentService.unregister(this.selectComponentService);\r\n    } else {\r\n      this.rootComponentService.unregister(this.selectComponentService);\r\n    }\r\n  }\r\n\r\n  validateSelectComponentConfig() {\r\n    if (!this.hasItemValueField()) {\r\n      console.warn(\"Items are missing value field: \" + this.componentConfig?.itemValueField + \". \" +\r\n                    \"Did you specify the right itemValueField?\");\r\n    }\r\n    if (!this.hasItemDescriptionField()) {\r\n      console.warn(\"Items are missing description field: \" + this.componentConfig?.itemDescriptionField + \". \" +\r\n                    \"Did you specify the right itemDescriptionField?\");\r\n    }\r\n  }\r\n  \r\n  hasItemDescriptionField() {\r\n    return this.componentConfig && this.componentConfig.itemDescriptionField && this.componentConfig.items && \r\n            this.componentConfig.items.length > 0 && \r\n            this.componentConfig.items[0][this.componentConfig.itemDescriptionField] ? true : false;\r\n  }\r\n\r\n  hasItemValueField() {\r\n    return this.componentConfig && this.componentConfig.itemValueField && this.componentConfig.items && \r\n            this.componentConfig.items.length > 0 && \r\n            this.componentConfig.items[0][this.componentConfig.itemValueField] ? true : false;\r\n  }\r\n\r\n  isRequired() {\r\n    let required = true;\r\n    if (this.componentConfig && this.componentConfig.required !== undefined && this.componentConfig.required === false) {\r\n      required = false;\r\n    }\r\n    return required;\r\n  }\r\n\r\n  click(event: Event) {\r\n    if (!this.showItems) {\r\n      this.doShowItems();\r\n    }\r\n  }\r\n\r\n  keydown(event: KeyboardEvent) {\r\n    switch(event.key) {\r\n      case 'ArrowDown': {\r\n        this.keydownArrowdown();\r\n        event.preventDefault();\r\n        break;\r\n      }\r\n      case 'ArrowUp': {\r\n        event.preventDefault();\r\n        this.keydownArrowup();\r\n        break;\r\n      }\r\n      case 'Tab': {\r\n        this.doHideItems();\r\n        break;\r\n      }\r\n      default: {\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  keyup(event: KeyboardEvent) {\r\n    switch(event.key) {\r\n      case 'Enter': {\r\n        if (this.showItems) {\r\n          event.preventDefault();\r\n          this.setValueFromSelectedItem();\r\n          this.doHideItems();\r\n        }\r\n        break;\r\n      }\r\n      case 'Escape': {\r\n        event.preventDefault();\r\n        this.doHideItems();\r\n        break;\r\n      }\r\n      default: {\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  set value(value: any) {\r\n    if (value !== undefined && value !== null && value !== \"\") {\r\n      if (this.internalValue !== value) {\r\n        this.internalValue = value;\r\n        this.setItemByDescription(value);\r\n        this.setExternalValue(value);\r\n        if (this.showItems) {\r\n          this.setSelectedItem(value);\r\n        }\r\n      }\r\n    } else {\r\n      this.item = null;\r\n      this.internalValue = null;\r\n      this.setExternalValue(null);\r\n    }\r\n  }\r\n\r\n  get value() {\r\n    return this.internalValue;\r\n  }\r\n\r\n  writeValue(value: any): void {\r\n    this.externalValue = value;\r\n    if (!this.writeValueIsCalledByOserver) {\r\n      this.selectComponentService.setValue(this.externalValue, 'component');\r\n      this.writeValueIsCalledByOserver = false;\r\n    }\r\n    this.setItemByValue(value);\r\n    if (this.componentConfig && this.componentConfig.itemDescriptionField && this.item) {\r\n       this.value = this.item[this.componentConfig.itemDescriptionField];\r\n    } else {\r\n      this.value = null;\r\n    }\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setDisabledState?(disabled: boolean): void {\r\n    this.disabled = disabled;\r\n  }\r\n\r\n  select(item: any): void {\r\n    this.selectedItem = item;\r\n    this.setValueFromSelectedItem();\r\n    this.doHideItems();\r\n    this.focusOnInputElement();\r\n  }\r\n\r\n  private setValueFromSelectedItem() {\r\n    if (this.componentConfig && this.componentConfig.itemDescriptionField && this.selectedItem) {\r\n      this.value = this.selectedItem[this.componentConfig.itemDescriptionField];\r\n      // externalValue is set by 'set value'\r\n      // event is set to component so this component can filter its own triggered service events\r\n      this.selectComponentService.setValue(this.externalValue, 'component');\r\n    }\r\n  }\r\n\r\n  isItem(item: any): boolean {\r\n    return this.componentConfig && this.componentConfig.itemValueField && this.item && \r\n            this.item[this.componentConfig.itemValueField] === item[this.componentConfig.itemValueField];\r\n  }\r\n\r\n  isSelectedItem(item: any): boolean {\r\n    return this.componentConfig && this.componentConfig.itemValueField && this.selectedItem && \r\n            this.selectedItem[this.componentConfig.itemValueField] === item[this.componentConfig.itemValueField];\r\n  }\r\n\r\n  doShowItems(): void {\r\n    this.setSelectedItem(this.value);\r\n    this.showItems = true;\r\n    setTimeout(() => this.moveElementInViewport(this.listItemsElement.nativeElement, this.selectContainerElement.nativeElement) );\r\n  }\r\n\r\n  doHideItems(): void {\r\n    this.selectedItem = null;\r\n    this.showItems = false;\r\n  }\r\n\r\n  // TODO: Make scroll into view work better before using it.\r\n  private scrollIntoView(alignToTop: boolean) {\r\n    this.liElements.forEach(el => {\r\n      if (el.nativeElement.classList.contains('sg-select-selected-item-active')) {\r\n        el.nativeElement.scrollIntoView({ behavior: \"smooth\"});\r\n        //el.nativeElement.scrollIntoView({ behavior: \"smooth\", block: alignToTop ? \"start\" : \"end\"});\r\n      }\r\n    });\r\n  }\r\n\r\n  private keydownArrowup() {\r\n    if (!this.showItems) {\r\n      this.doShowItems();\r\n    } else {\r\n      this.selectPrevious();\r\n    }\r\n    //this.scrollIntoView(false);\r\n  }\r\n\r\n  private keydownArrowdown() {\r\n    if (!this.showItems) {\r\n      this.doShowItems();\r\n    } else {\r\n      this.selectNext();\r\n    }\r\n    //this.scrollIntoView(true);\r\n  }\r\n\r\n  private setItemByValue(value: any) {\r\n    if (this.componentConfig && this.componentConfig.itemValueField) {\r\n      this.setItemByProperty(value, this.componentConfig.itemValueField)\r\n    }\r\n  }\r\n\r\n  private setItemByDescription(value: any) {\r\n    if (this.componentConfig && this.componentConfig.itemDescriptionField) {\r\n      this.setItemByProperty(value, this.componentConfig.itemDescriptionField)\r\n    }\r\n  }\r\n\r\n  private setItemByProperty(value: any, property: string) {\r\n    if (this.componentConfig && this.componentConfig.items) {\r\n      this.item = this.componentConfig.items\r\n        .find((item: any) => item[property] === value);\r\n    }\r\n  }\r\n\r\n  private setSelectedItem(value: any) {\r\n    if (this.componentConfig && this.componentConfig.items) {\r\n      if (!this.componentConfig.itemMatchStrategy || \r\n          this.componentConfig.itemMatchStrategy === 'startsWith') {\r\n        this.selectedItem = this.componentConfig.items\r\n          .find((item: any) => {\r\n              if (this.componentConfig && this.componentConfig.itemDescriptionField) {\r\n                return item[this.componentConfig.itemDescriptionField].search(new RegExp(value, \"i\")) === 0;\r\n              }\r\n              return undefined;\r\n            });\r\n      } else if (this.componentConfig.itemMatchStrategy === 'contains') {\r\n        this.selectedItem = this.componentConfig.items\r\n          .find((item: any) => {\r\n              if (this.componentConfig && this.componentConfig.itemDescriptionField) {\r\n                return item[this.componentConfig.itemDescriptionField].search(new RegExp(value, \"i\")) !== -1\r\n              }\r\n              return undefined;\r\n            });\r\n      }\r\n    }\r\n  }\r\n\r\n  private setExternalValue(value: any) {\r\n    if (this.componentConfig && this.componentConfig.itemValueField) {\r\n      if (value === null) {\r\n        this.externalValue = null;\r\n      } else { \r\n        this.externalValue = this.item ? this.item[this.componentConfig.itemValueField] : null;\r\n      }\r\n      this.onChange(this.externalValue);\r\n      this.onTouched(this.externalValue);\r\n    }\r\n  }\r\n\r\n  private focusOnInputElement(): void {\r\n    this.inputElement.nativeElement.focus();\r\n  }\r\n\r\n  private selectedIndex(): number {\r\n    let index = -1;\r\n    if (this.selectedItem && this.componentConfig && this.componentConfig.itemDescriptionField && \r\n      this.componentConfig.items && \r\n        this.componentConfig.items) {\r\n      for (let i=0; i<this.componentConfig.items.length; i++) {\r\n        if (this.componentConfig.items[i][this.componentConfig.itemDescriptionField] === \r\n            this.selectedItem[this.componentConfig.itemDescriptionField]) {\r\n              index = i;\r\n              break;\r\n        }\r\n      }\r\n    }\r\n    return index;\r\n  }\r\n\r\n  private selectPrevious(): void {\r\n    if (this.componentConfig && this.componentConfig.items && this.componentConfig.items.length > 0) {\r\n      let index = this.selectedIndex();\r\n      if (index === -1) {\r\n        this.selectedItem = this.componentConfig.items[this.componentConfig.items.length - 1];\r\n      } else if (index !== 0) {\r\n        this.selectedItem = this.componentConfig.items[index - 1];\r\n      }\r\n    }\r\n  }\r\n\r\n  private selectNext(): void {\r\n    if (this.componentConfig && this.componentConfig.items && this.componentConfig.items.length > 0) {\r\n      let index = this.selectedIndex();\r\n      if (index === -1) {\r\n        this.selectedItem = this.componentConfig.items[0];\r\n      } else if (index !== this.componentConfig.items.length - 1) {\r\n        this.selectedItem = this.componentConfig.items[index + 1];\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".sg-select {\r\n    position: relative;\r\n    width: 100%;\r\n}\r\n.sg-select-input {\r\n    width: 100%;\r\n}\r\n.sg-select-items {\r\n    position: absolute;\r\n    z-index: var(--sg-select-items-z-index);\r\n    top: 100%;\r\n    bottom: auto;\r\n    width: 100%;\r\n    height: var(--sg-select-items-height);\r\n    padding: 0.5em 0;\r\n    margin: 0;\r\n    border: var(--sg-input-border);\r\n    border-top: 0;\r\n    background-color: var(--sg-select-items-background-color);\r\n    list-style: none;\r\n    overflow-y: auto;\r\n}\r\n.sg-select-item {\r\n    cursor: pointer;\r\n    padding: 0.25em 0.5em;\r\n}\r\n.sg-select-item:hover {\r\n    background-color: var(--sg-primary-light-color);\r\n    color: var(--sg-primary-on-color);\r\n}\r\n.sg-select-selected-item-active {\r\n    background-color: var(--sg-primary-color);\r\n    color: var(--sg-primary-on-color);\r\n}\r\n",
                    "styleUrl": "./sg-select.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "selectComponentService",
                        "type": "SgSelectComponentService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "groupComponentService",
                        "type": "SgGroupComponentService | null",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "rootComponentService",
                        "type": "SgRootComponentService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 100,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "selectComponentService",
                        "type": "SgSelectComponentService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "groupComponentService",
                        "type": "SgGroupComponentService | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "rootComponentService",
                        "type": "SgRootComponentService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor",
                "OnInit"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 231,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 248
                    }
                }
            },
            "templateData": "<div *ngIf=\"componentConfig && componentConfig.show === true\" #selectContainer\r\n    class=\"sg-select\" [ngClass]=\"componentConfig.className ? componentConfig.className : ''\">\r\n    <input *ngIf=\"componentConfig.name\" #input #model=\"ngModel\" [(ngModel)]=\"value\" \r\n        [name]=\"componentConfig.name\" \r\n        class=\"sg-select-input\" [ngClass]=\"{'sg-input-error': model.invalid && (model.dirty || model.touched)}\"\r\n        [disabled]=\"disabled\" [required]=\"isRequired()\"\r\n        (click)=\"click($event)\" (keyup)=\"keyup($event)\" (keydown)=\"keydown($event)\"/>\r\n    <ul *ngIf=\"showItems && componentConfig && componentConfig.items\" #listItems\r\n        class=\"sg-select-items\"\r\n        [ngClass]=\"{'sg-select-items-show': showItems===true}\">\r\n        <li class=\"sg-select-item\" #item\r\n            [ngClass]=\"[isSelectedItem(itm) ? 'sg-select-selected-item-active' : '']\"\r\n            *ngFor=\"let itm of componentConfig.items\" (click)=\"select(itm)\">\r\n            <ng-container *ngIf=\"componentConfig.itemDescriptionField\">\r\n                {{itm[componentConfig.itemDescriptionField]}}\r\n            </ng-container>\r\n        </li>\r\n    </ul>\r\n</div>\r\n"
        },
        {
            "name": "SgSidebarMenuComponent",
            "id": "component-SgSidebarMenuComponent-118abbb3e4393f280c87965a576cdc28",
            "file": "projects/songlasses/src/lib/components/sg-sidebar-menu/sg-sidebar-menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sg-sidebar-menu",
            "styleUrls": [
                "./sg-sidebar-menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sg-sidebar-menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "contextMenuItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "sidebarMenu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SgSidebarMenu",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "closeSidebar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "closeSubmenu",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openSubmenu",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "menuItem",
                            "type": "SgMenuItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "menuItem",
                            "type": "SgMenuItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { SgMenuItem } from '../../models/sg-sidebar/sg-menu-item.model';\r\nimport { SgSidebarMenu } from '../../models/sg-sidebar/sg-sidebar-menu.model';\r\nimport { SgSidebarMenuService } from '../../services/sg-sidebar-menu/sg-sidebar-menu.service';\r\nimport { SgAppService } from '../../services/sg-app/sg-app.service';\r\n\r\n@Component({\r\n  selector: 'sg-sidebar-menu',\r\n  templateUrl: './sg-sidebar-menu.component.html',\r\n  styleUrls: ['./sg-sidebar-menu.component.scss']\r\n})\r\nexport class SgSidebarMenuComponent implements OnInit {\r\n\r\n  sidebarMenu!: SgSidebarMenu;\r\n\r\n  contextMenuItems: {parentMenuItem:SgMenuItem|null, menuItems:SgMenuItem[]}[] = [];\r\n\r\n  constructor(private appService: SgAppService, private sidebarMenuService: SgSidebarMenuService) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.sidebarMenuService.getSidebarMenuObservable().subscribe(sidebarMenu => {\r\n      this.sidebarMenu = sidebarMenu;\r\n      if (sidebarMenu.menuItemsStack && sidebarMenu.menuItemsStack.length > 0) {\r\n        this.contextMenuItems = [];\r\n        this.contextMenuItems[0] = {\r\n          parentMenuItem: null,\r\n          menuItems: sidebarMenu.menuItemsStack[sidebarMenu.menuItemsStack.length - 1]\r\n        };\r\n      }\r\n    });\r\n    this.sidebarMenuService.refresh();\r\n  }\r\n\r\n  closeSidebar() {\r\n    this.appService.hideSidebar();\r\n  }\r\n\r\n  openSubmenu(event: any, menuItem: SgMenuItem): void {\r\n    this.contextMenuItems[this.contextMenuItems.length] = {parentMenuItem: menuItem, menuItems: menuItem.menuItems ? menuItem.menuItems : []};\r\n  }\r\n\r\n  closeSubmenu(event: any): void {\r\n    this.contextMenuItems.pop();\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".sg-sidebar-content {\r\n    overflow: auto;\r\n    display: flex;\r\n    flex: 1;\r\n    flex-direction: column;\r\n    padding: 10px 0;\r\n}\r\n.sg-sidebar-menu-items {\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding: 0;\r\n    list-style-type: none;\r\n}\r\n.sg-sidebar-menu-item {\r\n    padding: 18px 16px;\r\n    transition: 0.3s;\r\n}\r\n.sg-sidebar-menu-item:hover {\r\n    background-color: var(--sg-sidebar-menu-item-hover-background-color);\r\n}\r\n.sg-sidebar-menu-item-disabled {\r\n    opacity: 0.5;\r\n    cursor: default;\r\n}\r\n.sg-sidebar-menu-item a {\r\n    color: var(--sg-sidebar-menu-item-a-color);\r\n    display: flex;\r\n    flex-direction: row;\r\n    text-decoration: none;\r\n}\r\n.sg-sidebar-menu-item a:hover {\r\n    color: var(--sg-sidebar-menu-item-a-hover-color);\r\n}   \r\n.sg-sidebar-menu-item a:visited {\r\n    color: var(--sg-sidebar-menu-item-a-visited-color);\r\n}\r\n.sg-sidebar-menu-item a:active {\r\n    color: var(--sg-sidebar-menu-item-a-active-color);\r\n}\r\n .sg-sidebar-menu-item-icon {\r\n    min-width: 50px;\r\n}\r\n.sg-sidebar-menu-item-icon i {\r\n    padding-right: 8px;\r\n    height: 24px;\r\n}\r\n.sg-sidebar-menu-item-label {\r\n    font-size: var(--sg-sidebar-menu-item-label-font-size);\r\n    font-weight: var(--sg-sidebar-menu-item-label-font-weight);  \r\n}\r\n.sg-sidebar-menu-item-sub-header {\r\n    padding: 18px 16px;\r\n    font-size: var(--sg-sidebar-menu-item-sub-header-font-size);\r\n    font-weight: var(--sg-sidebar-menu-item-sub-header-font-weight);  \r\n    color: var(--sg-sidebar-menu-item-sub-header-color);\r\n}\r\n.sg-sidebar-menu-item-divider {\r\n    height: 1px;\r\n    margin: 8px 0;\r\n}\r\n.sg-sidebar-menu-item-divider div {\r\n    height: 1px;\r\n    background-color: var(--sg-sidebar-menu-item-divider-color);\r\n}\r\n.sg-sidebar-menu-item-submenu-close {\r\n    border-bottom: var(--sg-sidebar-menu-item-submenu-close-border-bottom);\r\n}\r\n.sg-sidebar-menu-item-submenu-open-button, .sg-sidebar-menu-item-submenu-close-button {\r\n    display: flex;\r\n    margin-left: auto;\r\n    padding-left: 8px;\r\n}\r\n.sg-sidebar-menu-item-submenu-open-button svg, .sg-sidebar-menu-item-submenu-close-button svg {\r\n    margin-left: auto;\r\n    align-self: center;\r\n}\r\n.sg-sidebar-menu-item-submenu-open-button path {\r\n    stroke: var(--sg-sidebar-menu-item-submenu-open-button-color);\r\n    fill: var(--sg-sidebar-menu-item-submenu-open-button-color);\r\n}\r\n.sg-sidebar-menu-item-submenu-close-button path {\r\n    stroke: var(--sg-sidebar-menu-item-submenu-close-button-color);\r\n    fill: var(--sg-sidebar-menu-item-submenu-close-button-color);\r\n}\r\n@media (min-width: 601px) {\r\n    .sg-sidebar-content {\r\n        overflow: unset;\r\n    }\r\n}\r\n",
                    "styleUrl": "./sg-sidebar-menu.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "appService",
                        "type": "SgAppService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sidebarMenuService",
                        "type": "SgSidebarMenuService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "appService",
                        "type": "SgAppService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sidebarMenuService",
                        "type": "SgSidebarMenuService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"sg-sidebar-content\">\r\n    <ul class=\"sg-sidebar-menu-items\">\r\n        <li *ngIf=\"contextMenuItems && contextMenuItems.length > 1\" class=\"sg-sidebar-menu-item\">\r\n            <a href=\"javascript:;\" (click)=\"closeSubmenu($event);\" class=\"sg-sidebar-menu-item-submenu-close\">\r\n                <div class=\"sg-sidebar-menu-item-label\">{{contextMenuItems[contextMenuItems.length-1].parentMenuItem?.label}}</div>\r\n                <div class=\"sg-sidebar-menu-item-submenu-close-button\">\r\n                    <svg class=\"sg-svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" focusable=\"false\">\r\n                        <path d=\"M12 4L22 20H2L12 4Z\" fill=\"black\"/>\r\n                    </svg>\r\n                </div>\r\n            </a>\r\n        </li>\r\n        <ng-container *ngFor=\"let menuItem of contextMenuItems[contextMenuItems.length - 1].menuItems\">\r\n            <li *ngIf=\"menuItem.subHeader\" class=\"sg-sidebar-menu-item-sub-header\">\r\n                <div>{{menuItem.subHeader}}</div>\r\n            </li>\r\n            <li *ngIf=\"menuItem.label\" class=\"sg-sidebar-menu-item\" [ngClass]=\"menuItem.disabled ? 'sg-sidebar-menu-item-disabled' : ''\">\r\n                <ng-container *ngIf=\"!menuItem.disabled\">\r\n                    <a *ngIf=\"menuItem.routerLink\" routerLink=\"{{menuItem.routerLink}}\" (click)=\"closeSidebar()\">\r\n                        <div *ngIf=\"menuItem.icon\" class=\"sg-sidebar-menu-item-icon\"><i class=\"{{menuItem.icon}}\"></i></div>\r\n                        <div class=\"sg-sidebar-menu-item-label\">{{menuItem.label}}</div>\r\n                    </a>\r\n                    <a *ngIf=\"menuItem.href && !menuItem.hrefTarget\" [href]=\"menuItem.href\" (click)=\"closeSidebar();\">\r\n                        <div *ngIf=\"menuItem.icon\" class=\"sg-sidebar-menu-item-icon\"><i class=\"{{menuItem.icon}}\"></i></div>\r\n                        <div class=\"sg-sidebar-menu-item-label\">{{menuItem.label}}</div>\r\n                    </a>\r\n                    <a *ngIf=\"menuItem.href && menuItem.hrefTarget\" [href]=\"menuItem.href\" [target]=\"menuItem.hrefTarget\" (click)=\"closeSidebar();\">\r\n                        <div *ngIf=\"menuItem.icon\" class=\"sg-sidebar-menu-item-icon\"><i class=\"{{menuItem.icon}}\"></i></div>\r\n                        <div class=\"sg-sidebar-menu-item-label\">{{menuItem.label}}</div>\r\n                    </a>\r\n                    <a *ngIf=\"menuItem.action\" href=\"javascript:;\" (click)=\"menuItem.action($event, menuItem) ? closeSidebar() : null\">\r\n                        <div *ngIf=\"menuItem.icon\" class=\"sg-sidebar-menu-item-icon\"><i class=\"{{menuItem.icon}}\"></i></div>\r\n                        <div class=\"sg-sidebar-menu-item-label\">{{menuItem.label}}</div>\r\n                    </a>\r\n                    <a *ngIf=\"menuItem.menuItems\" href=\"javascript:;\" (click)=\"openSubmenu($event, menuItem);\">\r\n                        <div *ngIf=\"menuItem.icon\" class=\"sg-sidebar-menu-item-icon\"><i class=\"{{menuItem.icon}}\"></i></div>\r\n                        <div class=\"sg-sidebar-menu-item-label\">{{menuItem.label}}</div>\r\n                        <div class=\"sg-sidebar-menu-item-submenu-open-button\">\r\n                            <svg class=\"sg-svg-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" focusable=\"false\">\r\n                                <path d=\"M20 12L4 2L4 22L20 12Z\" fill=\"black\"/>\r\n                            </svg>\r\n                        </div>\r\n                    </a>\r\n                    <a *ngIf=\"!menuItem.href && !menuItem.routerLink && !menuItem.action && !menuItem.menuItems\" \r\n                        href=\"javascript:;\" (click)=\"closeSidebar();\">\r\n                        <div *ngIf=\"menuItem.icon\" class=\"sg-sidebar-menu-item-icon\"><i class=\"{{menuItem.icon}}\"></i></div>\r\n                        <div class=\"sg-sidebar-menu-item-label\">{{menuItem.label}}</div>\r\n                    </a>\r\n                </ng-container>\r\n                <div *ngIf=\"menuItem.disabled\">{{menuItem.label}}</div>\r\n            </li>\r\n            <li *ngIf=\"menuItem.divider\" class=\"sg-sidebar-menu-item-divider\">\r\n                <div></div>\r\n            </li>\r\n        </ng-container>\r\n    </ul>\r\n</div>\r\n"
        },
        {
            "name": "SidebarMenuComponent",
            "id": "component-SidebarMenuComponent-1c247408d76a33fe63beb4487f40f653",
            "file": "src/app/components/sidebar-menu/sidebar-menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sidebar-menu",
            "styleUrls": [
                "./sidebar-menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sidebar-menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "popSidebarMenuFn",
                    "defaultValue": "this.popSidebarMenuAction.bind(this)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "savedSidebarMenuItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SgMenuItem[]",
                    "optional": true,
                    "description": "",
                    "line": 92,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "sidebarMenuItems",
                    "defaultValue": "[\n    {\n      label: 'Label only'\n    },\n    {\n      divider: true\n    },\n    {\n      subHeader: 'Navigation'\n    },\n    {\n      label: 'Open google.nl',\n      href: 'https://www.google.nl',\n    },\n    {\n      label: 'Open google.nl in a new tab',\n      href: 'https://www.google.nl',\n      hrefTarget: '_blank'\n    },\n    {\n      label: 'Routerlink to Home',\n      routerLink: ['home']\n    },\n    {\n      divider: true\n    },\n    {\n      subHeader: 'Action'\n    },\n    {\n      label: 'Toggle body background color',\n      action: function(event, menuItem) {\n        if (menuItem) {\n          if (document.body.style.backgroundColor === 'green') {\n            document.body.style.backgroundColor = \"\";\n          } else {\n            document.body.style.backgroundColor = \"green\";\n          }\n        }\n        return false;\n      }\n    },\n    {\n      label: 'Pop sidebar',\n      action: this.popSidebarMenuFn\n    },\n    {\n      divider: true\n    },\n    {\n      subHeader: 'Submenu'\n    },\n    {\n      label: 'Menu item 1 (submenu)',\n      menuItems: [\n        {\n          label: 'Menu item 1.1'\n        },\n        {\n          label: 'Menu item 1.2 (submenu)',\n          menuItems: [\n            {\n              label: 'Menu item 1.2.1'\n            }            \n          ]\n        }\n      ]\n    },\n    {\n      divider: true\n    },\n    {\n      subHeader: 'Disabled'\n    },\n    {\n      label: 'This menu item is disabled',\n      disabled: true,\n    }\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SgMenuItem[]",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "popSidebarMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "popSidebarMenuAction",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "menuItem",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "menuItem",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "pushSidebarMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { SgMenuItem } from 'songlasses';\nimport { SgSidebarMenuService } from 'songlasses';\n\n@Component({\n  selector: 'sidebar-menu',\n  templateUrl: './sidebar-menu.component.html',\n  styleUrls: ['./sidebar-menu.component.scss']\n})\nexport class SidebarMenuComponent implements OnInit {\n\n  private popSidebarMenuFn = this.popSidebarMenuAction.bind(this);\n  private sidebarMenuItems: SgMenuItem[] = [\n    {\n      label: 'Label only'\n    },\n    {\n      divider: true\n    },\n    {\n      subHeader: 'Navigation'\n    },\n    {\n      label: 'Open google.nl',\n      href: 'https://www.google.nl',\n    },\n    {\n      label: 'Open google.nl in a new tab',\n      href: 'https://www.google.nl',\n      hrefTarget: '_blank'\n    },\n    {\n      label: 'Routerlink to Home',\n      routerLink: ['home']\n    },\n    {\n      divider: true\n    },\n    {\n      subHeader: 'Action'\n    },\n    {\n      label: 'Toggle body background color',\n      action: function(event, menuItem) {\n        if (menuItem) {\n          if (document.body.style.backgroundColor === 'green') {\n            document.body.style.backgroundColor = \"\";\n          } else {\n            document.body.style.backgroundColor = \"green\";\n          }\n        }\n        return false;\n      }\n    },\n    {\n      label: 'Pop sidebar',\n      action: this.popSidebarMenuFn\n    },\n    {\n      divider: true\n    },\n    {\n      subHeader: 'Submenu'\n    },\n    {\n      label: 'Menu item 1 (submenu)',\n      menuItems: [\n        {\n          label: 'Menu item 1.1'\n        },\n        {\n          label: 'Menu item 1.2 (submenu)',\n          menuItems: [\n            {\n              label: 'Menu item 1.2.1'\n            }            \n          ]\n        }\n      ]\n    },\n    {\n      divider: true\n    },\n    {\n      subHeader: 'Disabled'\n    },\n    {\n      label: 'This menu item is disabled',\n      disabled: true,\n    }\n  ];\n  private savedSidebarMenuItems?: SgMenuItem[];\n\n  constructor(private sgSidebarMenuService: SgSidebarMenuService) { \n  }\n\n  ngOnInit(): void {\n  }\n\n  pushSidebarMenu(): void {\n    if (this.sgSidebarMenuService.getSidebarMenu().menuItemsStack.length === 0 ||\n        this.sgSidebarMenuService.getSidebarMenu().menuItemsStack[this.sgSidebarMenuService.getSidebarMenu().menuItemsStack.length - 1] !== this.sidebarMenuItems) {\n      this.sgSidebarMenuService.pushMenuItems(this.sidebarMenuItems);\n    }\n  }\n  \n  popSidebarMenu(): void {\n    if (this.sgSidebarMenuService.getSidebarMenu().menuItemsStack.length !== 0 &&\n        this.sgSidebarMenuService.getSidebarMenu().menuItemsStack[this.sgSidebarMenuService.getSidebarMenu().menuItemsStack.length - 1] === this.sidebarMenuItems) {\n      this.sgSidebarMenuService.popMenuItems();\n    }\n  }\n\n  private popSidebarMenuAction(event: any, menuItem: any) {\n    this.popSidebarMenu();\n    return false;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./sidebar-menu.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "sgSidebarMenuService",
                        "type": "SgSidebarMenuService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 92,
                "jsdoctags": [
                    {
                        "name": "sgSidebarMenuService",
                        "type": "SgSidebarMenuService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1>Sidebar</h1>\n<p>\n    Click the \"Push sidebar menu items\" button to push menu options showing available options for the menu items in a sidebar.\n    <button (click)=\"pushSidebarMenu()\">Push sidebar menu items</button>\n</p>\n<p>\n    Click the \"Pop sidebar menu items\" button to remove the current menu items from the sidebar and load the previous if present.    \n    <button (click)=\"popSidebarMenu()\">Pop sidebar menu items</button>\n</p>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-bb995651493b8ac34032386d0b7db104",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { RouterModule } from '@angular/router';\r\nimport { SgSidebarMenuModule } from 'songlasses';\r\nimport { SgAppModule } from 'songlasses';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent,  } from './app.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    RouterModule,\r\n    AppRoutingModule,\r\n    // songlasses\r\n    SgAppModule,\r\n    SgSidebarMenuModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "SgAppModule"
                        },
                        {
                            "name": "SgSidebarMenuModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-24a2f13cc2cf60535e2703b92f966c0f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nconst routes: Routes = [\r\n  {path: '', redirectTo: 'home', pathMatch: 'full'},\r\n  {path: 'home', loadChildren: () => \"import('./components/home/home.module').then(m => m.HomeModule)\"},\r\n  {path: 'select', loadChildren: () => \"import('./components/select/select.module').then(m => m.SelectModule)\"},\r\n  {path: 'sidebar-menu', loadChildren: () => \"import('./components/sidebar-menu/sidebar-menu.module').then(m => m.SidebarModule)\"},\r\n  {path: 'services/root-component-service', \r\n    loadChildren: () => \"import('./components/services/root-component-service/root-component-service.module')\\\n      .then(m => m.RootComponentServiceModule)\"}\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreSharedModule",
            "id": "module-CoreSharedModule-c503ab43af130793ddf14e0fde0d1a17",
            "description": "<p>A shared module with common modules, components, directives and pipes to be imported by only the modules that\nuses them. They are not app-wide like the CoreModule and for this reason it is not allowed to specify providers.\nSee <a href=\"https://angular.io/guide/ngmodule-faq#q-why-bad\">https://angular.io/guide/ngmodule-faq#q-why-bad</a>.</p>\n",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/songlasses/src/lib/shared/core-shared.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\n/**\r\n * A shared module with common modules, components, directives and pipes to be imported by only the modules that\r\n * uses them. They are not app-wide like the CoreModule and for this reason it is not allowed to specify providers.\r\n * See https://angular.io/guide/ngmodule-faq#q-why-bad.\r\n */\r\n@NgModule({\r\n  imports: [\r\n    CommonModule, FormsModule, ReactiveFormsModule\r\n  ],\r\n  declarations: [\r\n  ],\r\n  exports: [\r\n    CommonModule, FormsModule, ReactiveFormsModule\r\n  ]\r\n})\r\nexport class CoreSharedModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HomeModule",
            "id": "module-HomeModule-ca5966f7d019f50d95ca17c106e7dde7",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/home/home.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { HomeRoutingModule } from './home.routing.module';\r\nimport { HomeComponent } from './home.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        HomeRoutingModule\r\n    ],\r\n    declarations: [\r\n        HomeComponent\r\n    ]\r\n})\r\nexport class HomeModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "HomeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "HomeRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HomeRoutingModule",
            "id": "module-HomeRoutingModule-5035525f22d1da93a4cc76c94dd22d68",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/home/home.routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router'\r\nimport { HomeComponent } from './home.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forChild([\r\n            { path: '', component: HomeComponent }\r\n        ])\r\n    ],\r\n    exports: [\r\n        RouterModule\r\n    ]\r\n})\r\nexport class HomeRoutingModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RootComponentServiceModule",
            "id": "module-RootComponentServiceModule-c769719e216ce4fb715729e149b1927c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/services/root-component-service/root-component-service.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { SgSelectModule, SgGroupComponentDirectiveModule } from 'songlasses';\r\nimport { RootComponentServiceComponent } from './root-component-service.component';\r\nimport { RootComponentServiceRoutingModule } from './root-component-service.routing.module';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        SgGroupComponentDirectiveModule,\r\n        SgSelectModule,\r\n        RootComponentServiceRoutingModule\r\n    ],\r\n    declarations: [\r\n        RootComponentServiceComponent\r\n    ]\r\n})\r\nexport class RootComponentServiceModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "RootComponentServiceComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SgSelectModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RootComponentServiceRoutingModule",
            "id": "module-RootComponentServiceRoutingModule-529d2e43fc9bd919e7e46508b24c1bd9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/services/root-component-service/root-component-service.routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router'\r\nimport { RootComponentServiceComponent } from './root-component-service.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forChild([\r\n            { path: '', component: RootComponentServiceComponent }\r\n        ])\r\n    ],\r\n    exports: [\r\n        RouterModule\r\n    ]\r\n})\r\nexport class RootComponentServiceRoutingModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SelectModule",
            "id": "module-SelectModule-e61055ad02efcaf15b923910b418c998",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/select/select.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { SelectRoutingModule } from './select.routing.module';\r\nimport { SelectComponent } from './select.component';\r\nimport { SgSelectModule } from 'songlasses';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        SelectRoutingModule,\r\n        SgSelectModule\r\n    ],\r\n    declarations: [\r\n        SelectComponent\r\n    ]\r\n})\r\nexport class SelectModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SelectComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SelectRoutingModule"
                        },
                        {
                            "name": "SgSelectModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SelectRoutingModule",
            "id": "module-SelectRoutingModule-ceb9ba40bb2537371fd1081369a82ff7",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/select/select.routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router'\r\nimport { SelectComponent } from './select.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forChild([\r\n            { path: '', component: SelectComponent }\r\n        ])\r\n    ],\r\n    exports: [\r\n        RouterModule\r\n    ]\r\n})\r\nexport class SelectRoutingModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SgAppModule",
            "id": "module-SgAppModule-d9ae3bac93cc2526aafc9a2b7591a110",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/songlasses/src/lib/components/sg-app/sg-app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule, } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport { SgAppComponent } from './sg-app.component';\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tCommonModule,\r\n\t\tRouterModule\r\n\t],\r\n\tdeclarations: [\r\n\t\tSgAppComponent\r\n\t],\r\n\texports: [\r\n\t\tSgAppComponent\r\n\t],\r\n})\r\nexport class SgAppModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SgAppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SgAppComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SgGroupComponentDirectiveModule",
            "id": "module-SgGroupComponentDirectiveModule-cbbf1caf55ca3aa3947e9d71f6604090",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/songlasses/src/lib/directives/sg-component/group-component-directive.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule, } from '@angular/core';\r\nimport { SgGroupComponentDirective } from './group-component.directive';\r\n\r\n@NgModule({\r\n\timports: [\r\n\t],\r\n\tdeclarations: [\r\n\t\tSgGroupComponentDirective\r\n\t],\r\n\texports: [\r\n\t\tSgGroupComponentDirective\r\n\t]\r\n})\r\nexport class SgGroupComponentDirectiveModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SgGroupComponentDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SgGroupComponentDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SgSelectModule",
            "id": "module-SgSelectModule-311d9f0a73009fb825d9203d37385dd1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/songlasses/src/lib/components/sg-select/sg-select.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule, } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { SgSelectComponent } from './sg-select.component';\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tCommonModule,\r\n\t\tFormsModule\r\n\t],\r\n\tdeclarations: [\r\n\t\tSgSelectComponent\r\n\t],\r\n\texports: [\r\n\t\tSgSelectComponent\r\n\t],\r\n})\r\nexport class SgSelectModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SgSelectComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SgSelectComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SgSidebarMenuModule",
            "id": "module-SgSidebarMenuModule-1f8d06ea2e70bd8a0bb62866ea7d43ef",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/songlasses/src/lib/components/sg-sidebar-menu/sg-sidebar-menu.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule, } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport { SgSidebarMenuComponent } from './sg-sidebar-menu.component';\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tCommonModule,\r\n\t\tRouterModule\r\n\t],\r\n\tdeclarations: [\r\n\t\tSgSidebarMenuComponent\r\n\t],\r\n\texports: [\r\n\t\tSgSidebarMenuComponent\r\n\t],\r\n})\r\nexport class SgSidebarMenuModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SgSidebarMenuComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SgSidebarMenuComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SidebarMenuRoutingModule",
            "id": "module-SidebarMenuRoutingModule-c37cb016c0d3af27d194051618ef0972",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/sidebar-menu/sidebar-menu.routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router'\r\nimport { SidebarMenuComponent } from './sidebar-menu.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forChild([\r\n            { path: '', component: SidebarMenuComponent }\r\n        ])\r\n    ],\r\n    exports: [\r\n        RouterModule\r\n    ]\r\n})\r\nexport class SidebarMenuRoutingModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SidebarModule",
            "id": "module-SidebarModule-baee0a03b2d2ec7ebd1fb0909ab93833",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/sidebar-menu/sidebar-menu.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { SidebarMenuRoutingModule } from './sidebar-menu.routing.module';\r\nimport { SidebarMenuComponent } from './sidebar-menu.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        SidebarMenuRoutingModule\r\n    ],\r\n    declarations: [\r\n        SidebarMenuComponent\r\n    ]\r\n})\r\nexport class SidebarModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SidebarMenuComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SidebarMenuRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/songlasses/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/SgSelect.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "IntegratedSidebar",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/SgApp.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "NoSidebar",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/SgApp.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/songlasses/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "SlidingSidebar",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/SgApp.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "SUPERHEROES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/mocks/mock-superheroes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Superhero[]",
                "defaultValue": "[\r\n    {\r\n      id: 'BMB',\r\n      name: 'Barbara Morse Barton',\r\n      superheroName: 'Mockingbird'\r\n    },\r\n    {\r\n      id: 'BW',\r\n      name: 'Bruce Wayne',\r\n      superheroName: 'Batman'\r\n    },\r\n    {\r\n      id: 'CK',\r\n      name: 'Clark Kent',\r\n      superheroName: 'Superman'\r\n    },\r\n    {\r\n      id: 'DSS',\r\n      name: 'Dr. Stephen Strange',\r\n      superheroName: 'Doctor Strange'\r\n    },\r\n    {\r\n      id: 'JD',\r\n      name: 'Jessica Drew',\r\n      superheroName: 'Spider-Woman'\r\n    },\r\n    {\r\n      id: 'KD',\r\n      name: 'Kara Danvers',\r\n      superheroName: 'Supergirl'\r\n    },\r\n    {\r\n      id: 'LC',\r\n      name: 'Luke Cage',\r\n      superheroName: 'Power Man'\r\n    },\r\n    {\r\n      id: 'OM',\r\n      name: 'Ororo Monroe',\r\n      superheroName: 'Storm'\r\n    },\r\n    {\r\n      id: 'PD',\r\n      name: 'Princess Diana',\r\n      superheroName: 'Wonder Woman'\r\n    },\r\n    {\r\n      id: 'PP',\r\n      name: 'Peter Parker',\r\n      superheroName: 'Spider-Man'\r\n    },\r\n    {\r\n      id: 'SP',\r\n      name: 'Samantha Parrington',\r\n      superheroName: 'Valkyrie'\r\n    },\r\n    {\r\n      id: 'T',\r\n      name: 'T\\'Challa',\r\n      superheroName: 'Black Panther'\r\n    }\r\n]"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/SgApp.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<SgAppComponent>",
                "defaultValue": "(args: SgAppComponent) => ({\n  template: `\n<div style=\"height: 400px\">\n\n  <sg-app [app]=\"app\">\n\n    <ng-template #header>\n      Header\n    </ng-template>\n\n    <ng-template #content>\n      Content\n    </ng-template>\n\n    <ng-template #footer>\n      Footer\n    </ng-template>\n\n    <ng-template #sidebar>\n      Sidebar\n    </ng-template>\n\n  </sg-app>  \n</div>\n  `,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/SgSelect.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<SgSelectComponent>",
                "defaultValue": "(args: SgSelectComponent) => ({\n  props: args\n})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "projects/songlasses/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/songlasses/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/songlasses/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/stories/SgSelect.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/SgSelect.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/SgSelect.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<SgSelectComponent>",
                    "defaultValue": "(args: SgSelectComponent) => ({\n  props: args\n})"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/stories/SgApp.stories.ts": [
                {
                    "name": "IntegratedSidebar",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/SgApp.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "NoSidebar",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/SgApp.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "SlidingSidebar",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/SgApp.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/SgApp.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<SgAppComponent>",
                    "defaultValue": "(args: SgAppComponent) => ({\n  template: `\n<div style=\"height: 400px\">\n\n  <sg-app [app]=\"app\">\n\n    <ng-template #header>\n      Header\n    </ng-template>\n\n    <ng-template #content>\n      Content\n    </ng-template>\n\n    <ng-template #footer>\n      Footer\n    </ng-template>\n\n    <ng-template #sidebar>\n      Sidebar\n    </ng-template>\n\n  </sg-app>  \n</div>\n  `,\n  props: args,\n})"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ],
            "src/app/mocks/mock-superheroes.ts": [
                {
                    "name": "SUPERHEROES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/mocks/mock-superheroes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Superhero[]",
                    "defaultValue": "[\r\n    {\r\n      id: 'BMB',\r\n      name: 'Barbara Morse Barton',\r\n      superheroName: 'Mockingbird'\r\n    },\r\n    {\r\n      id: 'BW',\r\n      name: 'Bruce Wayne',\r\n      superheroName: 'Batman'\r\n    },\r\n    {\r\n      id: 'CK',\r\n      name: 'Clark Kent',\r\n      superheroName: 'Superman'\r\n    },\r\n    {\r\n      id: 'DSS',\r\n      name: 'Dr. Stephen Strange',\r\n      superheroName: 'Doctor Strange'\r\n    },\r\n    {\r\n      id: 'JD',\r\n      name: 'Jessica Drew',\r\n      superheroName: 'Spider-Woman'\r\n    },\r\n    {\r\n      id: 'KD',\r\n      name: 'Kara Danvers',\r\n      superheroName: 'Supergirl'\r\n    },\r\n    {\r\n      id: 'LC',\r\n      name: 'Luke Cage',\r\n      superheroName: 'Power Man'\r\n    },\r\n    {\r\n      id: 'OM',\r\n      name: 'Ororo Monroe',\r\n      superheroName: 'Storm'\r\n    },\r\n    {\r\n      id: 'PD',\r\n      name: 'Princess Diana',\r\n      superheroName: 'Wonder Woman'\r\n    },\r\n    {\r\n      id: 'PP',\r\n      name: 'Peter Parker',\r\n      superheroName: 'Spider-Man'\r\n    },\r\n    {\r\n      id: 'SP',\r\n      name: 'Samantha Parrington',\r\n      superheroName: 'Valkyrie'\r\n    },\r\n    {\r\n      id: 'T',\r\n      name: 'T\\'Challa',\r\n      superheroName: 'Black Panther'\r\n    }\r\n]"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "redirectTo": "home",
                        "pathMatch": "full"
                    },
                    {
                        "path": "home",
                        "loadChildren": "./components/home/home.module#HomeModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "HomeModule"
                            }
                        ]
                    },
                    {
                        "path": "select",
                        "loadChildren": "./components/select/select.module#SelectModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "SelectModule"
                            }
                        ]
                    },
                    {
                        "path": "sidebar-menu",
                        "loadChildren": "./components/sidebar-menu/sidebar-menu.module#SidebarModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "SidebarModule"
                            }
                        ]
                    },
                    {
                        "path": "services/root-component-service",
                        "loadChildren": "./components/services/root-component-service/root-component-service.module#RootComponentServiceModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "RootComponentServiceModule"
                            }
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 5,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/songlasses/src/lib/components/sg-app/sg-app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SgAppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/songlasses/src/lib/components/sg-select/sg-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SgSelectComponent",
                "coveragePercent": 1,
                "coverageCount": "1/53",
                "status": "low"
            },
            {
                "filePath": "projects/songlasses/src/lib/components/sg-sidebar-menu/sg-sidebar-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SgSidebarMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/songlasses/src/lib/directives/sg-component/group-component.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "SgGroupComponentDirective",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/songlasses/src/lib/models/sg-app/sg-app.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SgApp",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/songlasses/src/lib/models/sg-component/sg-component-config-event.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SgComponentConfigEvent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/songlasses/src/lib/models/sg-component/sg-component-config.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SgComponentConfig",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/songlasses/src/lib/models/sg-component/sg-component-value-event.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SgComponentValueEvent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/songlasses/src/lib/models/sg-component/sg-event.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SgComponentServiceEvent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/songlasses/src/lib/models/sg-component/sg-group-component-config.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SgGroupComponentConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/songlasses/src/lib/models/sg-component/sg-root-component-config.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SgRootComponentConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/songlasses/src/lib/models/sg-component/sg-select-component-config.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SgSelectComponentConfig",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/songlasses/src/lib/models/sg-sidebar/sg-menu-item.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SgMenuItem",
                "coveragePercent": 9,
                "coverageCount": "1/11",
                "status": "low"
            },
            {
                "filePath": "projects/songlasses/src/lib/models/sg-sidebar/sg-sidebar-menu.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SgSidebarMenu",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/songlasses/src/lib/services/sg-app/sg-app.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SgAppService",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/songlasses/src/lib/services/sg-component/sg-component-has-value.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SgComponentHasValueService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/songlasses/src/lib/services/sg-component/sg-component-service-with-children.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SgComponentServiceWithChildren",
                "coveragePercent": 8,
                "coverageCount": "2/23",
                "status": "low"
            },
            {
                "filePath": "projects/songlasses/src/lib/services/sg-component/sg-component-value.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SgComponentValueService",
                "coveragePercent": 13,
                "coverageCount": "3/22",
                "status": "low"
            },
            {
                "filePath": "projects/songlasses/src/lib/services/sg-component/sg-component.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SgComponentService",
                "coveragePercent": 7,
                "coverageCount": "1/13",
                "status": "low"
            },
            {
                "filePath": "projects/songlasses/src/lib/services/sg-component/sg-group-component.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SgGroupComponentService",
                "coveragePercent": 7,
                "coverageCount": "2/26",
                "status": "low"
            },
            {
                "filePath": "projects/songlasses/src/lib/services/sg-component/sg-root-component.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SgRootComponentService",
                "coveragePercent": 8,
                "coverageCount": "2/24",
                "status": "low"
            },
            {
                "filePath": "projects/songlasses/src/lib/services/sg-component/sg-select-component.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SgSelectComponentService",
                "coveragePercent": 7,
                "coverageCount": "2/27",
                "status": "low"
            },
            {
                "filePath": "projects/songlasses/src/lib/services/sg-sidebar-menu/sg-sidebar-menu.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SgSidebarMenuService",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/songlasses/src/lib/utils/array-utils.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ArrayUtils",
                "coveragePercent": 50,
                "coverageCount": "2/4",
                "status": "medium"
            },
            {
                "filePath": "projects/songlasses/src/lib/utils/assert-utils.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AssertUtils",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "projects/songlasses/src/lib/utils/copy-utils.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CopyUtils",
                "coveragePercent": 71,
                "coverageCount": "5/7",
                "status": "good"
            },
            {
                "filePath": "projects/songlasses/src/lib/utils/function-utils.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FunctionUtils",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/songlasses/src/lib/utils/inject-utils.ts",
                "type": "class",
                "linktype": "classe",
                "name": "InjectUtils",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "projects/songlasses/src/lib/utils/object-utils.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ObjectUtils",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/songlasses/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/songlasses/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/select/select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "src/app/components/services/root-component-service/root-component-service.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RootComponentServiceComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/components/sidebar-menu/sidebar-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SidebarMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/mocks/mock-superheroes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SUPERHEROES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/superhero.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Superhero",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/superheroes.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SuperheroesService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/SgApp.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IntegratedSidebar",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/SgApp.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NoSidebar",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/SgApp.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SlidingSidebar",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/SgApp.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/SgSelect.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/SgSelect.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}